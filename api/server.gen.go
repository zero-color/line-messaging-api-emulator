// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for BotInfoResponseChatMode.
const (
	Bot  BotInfoResponseChatMode = "bot"
	Chat BotInfoResponseChatMode = "chat"
)

// Defines values for BotInfoResponseMarkAsReadMode.
const (
	Auto   BotInfoResponseMarkAsReadMode = "auto"
	Manual BotInfoResponseMarkAsReadMode = "manual"
)

// Defines values for CouponCreateRequestTimezone.
const (
	CouponCreateRequestTimezoneAMERICAANCHORAGE  CouponCreateRequestTimezone = "AMERICA_ANCHORAGE"
	CouponCreateRequestTimezoneAMERICACARACAS    CouponCreateRequestTimezone = "AMERICA_CARACAS"
	CouponCreateRequestTimezoneAMERICACHICAGO    CouponCreateRequestTimezone = "AMERICA_CHICAGO"
	CouponCreateRequestTimezoneAMERICALOSANGELES CouponCreateRequestTimezone = "AMERICA_LOS_ANGELES"
	CouponCreateRequestTimezoneAMERICANEWYORK    CouponCreateRequestTimezone = "AMERICA_NEW_YORK"
	CouponCreateRequestTimezoneAMERICAPHOENIX    CouponCreateRequestTimezone = "AMERICA_PHOENIX"
	CouponCreateRequestTimezoneAMERICASANTIAGO   CouponCreateRequestTimezone = "AMERICA_SANTIAGO"
	CouponCreateRequestTimezoneAMERICASAOPAULO   CouponCreateRequestTimezone = "AMERICA_SAO_PAULO"
	CouponCreateRequestTimezoneAMERICASTJOHNS    CouponCreateRequestTimezone = "AMERICA_ST_JOHNS"
	CouponCreateRequestTimezoneASIAALMATY        CouponCreateRequestTimezone = "ASIA_ALMATY"
	CouponCreateRequestTimezoneASIABANGKOK       CouponCreateRequestTimezone = "ASIA_BANGKOK"
	CouponCreateRequestTimezoneASIACOLOMBO       CouponCreateRequestTimezone = "ASIA_COLOMBO"
	CouponCreateRequestTimezoneASIAKABUL         CouponCreateRequestTimezone = "ASIA_KABUL"
	CouponCreateRequestTimezoneASIAKATHMANDU     CouponCreateRequestTimezone = "ASIA_KATHMANDU"
	CouponCreateRequestTimezoneASIARANGOON       CouponCreateRequestTimezone = "ASIA_RANGOON"
	CouponCreateRequestTimezoneASIATAIPEI        CouponCreateRequestTimezone = "ASIA_TAIPEI"
	CouponCreateRequestTimezoneASIATASHKENT      CouponCreateRequestTimezone = "ASIA_TASHKENT"
	CouponCreateRequestTimezoneASIATBILISI       CouponCreateRequestTimezone = "ASIA_TBILISI"
	CouponCreateRequestTimezoneASIATEHRAN        CouponCreateRequestTimezone = "ASIA_TEHRAN"
	CouponCreateRequestTimezoneASIATOKYO         CouponCreateRequestTimezone = "ASIA_TOKYO"
	CouponCreateRequestTimezoneASIAVLADIVOSTOK   CouponCreateRequestTimezone = "ASIA_VLADIVOSTOK"
	CouponCreateRequestTimezoneATLANTICCAPEVERDE CouponCreateRequestTimezone = "ATLANTIC_CAPE_VERDE"
	CouponCreateRequestTimezoneAUSTRALIADARWIN   CouponCreateRequestTimezone = "AUSTRALIA_DARWIN"
	CouponCreateRequestTimezoneAUSTRALIASYDNEY   CouponCreateRequestTimezone = "AUSTRALIA_SYDNEY"
	CouponCreateRequestTimezoneETCGMTMINUS11     CouponCreateRequestTimezone = "ETC_GMT_MINUS_11"
	CouponCreateRequestTimezoneETCGMTMINUS12     CouponCreateRequestTimezone = "ETC_GMT_MINUS_12"
	CouponCreateRequestTimezoneETCGMTMINUS2      CouponCreateRequestTimezone = "ETC_GMT_MINUS_2"
	CouponCreateRequestTimezoneETCGMTPLUS12      CouponCreateRequestTimezone = "ETC_GMT_PLUS_12"
	CouponCreateRequestTimezoneEUROPEISTANBUL    CouponCreateRequestTimezone = "EUROPE_ISTANBUL"
	CouponCreateRequestTimezoneEUROPELONDON      CouponCreateRequestTimezone = "EUROPE_LONDON"
	CouponCreateRequestTimezoneEUROPEMOSCOW      CouponCreateRequestTimezone = "EUROPE_MOSCOW"
	CouponCreateRequestTimezoneEUROPEPARIS       CouponCreateRequestTimezone = "EUROPE_PARIS"
	CouponCreateRequestTimezonePACIFICHONOLULU   CouponCreateRequestTimezone = "PACIFIC_HONOLULU"
	CouponCreateRequestTimezonePACIFICTONGATAPU  CouponCreateRequestTimezone = "PACIFIC_TONGATAPU"
)

// Defines values for CouponCreateRequestVisibility.
const (
	CouponCreateRequestVisibilityPUBLIC   CouponCreateRequestVisibility = "PUBLIC"
	CouponCreateRequestVisibilityUNLISTED CouponCreateRequestVisibility = "UNLISTED"
)

// Defines values for CouponResponseStatus.
const (
	CouponResponseStatusCLOSED  CouponResponseStatus = "CLOSED"
	CouponResponseStatusDRAFT   CouponResponseStatus = "DRAFT"
	CouponResponseStatusRUNNING CouponResponseStatus = "RUNNING"
)

// Defines values for CouponResponseTimezone.
const (
	CouponResponseTimezoneAMERICAANCHORAGE  CouponResponseTimezone = "AMERICA_ANCHORAGE"
	CouponResponseTimezoneAMERICACARACAS    CouponResponseTimezone = "AMERICA_CARACAS"
	CouponResponseTimezoneAMERICACHICAGO    CouponResponseTimezone = "AMERICA_CHICAGO"
	CouponResponseTimezoneAMERICALOSANGELES CouponResponseTimezone = "AMERICA_LOS_ANGELES"
	CouponResponseTimezoneAMERICANEWYORK    CouponResponseTimezone = "AMERICA_NEW_YORK"
	CouponResponseTimezoneAMERICAPHOENIX    CouponResponseTimezone = "AMERICA_PHOENIX"
	CouponResponseTimezoneAMERICASANTIAGO   CouponResponseTimezone = "AMERICA_SANTIAGO"
	CouponResponseTimezoneAMERICASAOPAULO   CouponResponseTimezone = "AMERICA_SAO_PAULO"
	CouponResponseTimezoneAMERICASTJOHNS    CouponResponseTimezone = "AMERICA_ST_JOHNS"
	CouponResponseTimezoneASIAALMATY        CouponResponseTimezone = "ASIA_ALMATY"
	CouponResponseTimezoneASIABANGKOK       CouponResponseTimezone = "ASIA_BANGKOK"
	CouponResponseTimezoneASIACOLOMBO       CouponResponseTimezone = "ASIA_COLOMBO"
	CouponResponseTimezoneASIAKABUL         CouponResponseTimezone = "ASIA_KABUL"
	CouponResponseTimezoneASIAKATHMANDU     CouponResponseTimezone = "ASIA_KATHMANDU"
	CouponResponseTimezoneASIARANGOON       CouponResponseTimezone = "ASIA_RANGOON"
	CouponResponseTimezoneASIATAIPEI        CouponResponseTimezone = "ASIA_TAIPEI"
	CouponResponseTimezoneASIATASHKENT      CouponResponseTimezone = "ASIA_TASHKENT"
	CouponResponseTimezoneASIATBILISI       CouponResponseTimezone = "ASIA_TBILISI"
	CouponResponseTimezoneASIATEHRAN        CouponResponseTimezone = "ASIA_TEHRAN"
	CouponResponseTimezoneASIATOKYO         CouponResponseTimezone = "ASIA_TOKYO"
	CouponResponseTimezoneASIAVLADIVOSTOK   CouponResponseTimezone = "ASIA_VLADIVOSTOK"
	CouponResponseTimezoneATLANTICCAPEVERDE CouponResponseTimezone = "ATLANTIC_CAPE_VERDE"
	CouponResponseTimezoneAUSTRALIADARWIN   CouponResponseTimezone = "AUSTRALIA_DARWIN"
	CouponResponseTimezoneAUSTRALIASYDNEY   CouponResponseTimezone = "AUSTRALIA_SYDNEY"
	CouponResponseTimezoneETCGMTMINUS11     CouponResponseTimezone = "ETC_GMT_MINUS_11"
	CouponResponseTimezoneETCGMTMINUS12     CouponResponseTimezone = "ETC_GMT_MINUS_12"
	CouponResponseTimezoneETCGMTMINUS2      CouponResponseTimezone = "ETC_GMT_MINUS_2"
	CouponResponseTimezoneETCGMTPLUS12      CouponResponseTimezone = "ETC_GMT_PLUS_12"
	CouponResponseTimezoneEUROPEISTANBUL    CouponResponseTimezone = "EUROPE_ISTANBUL"
	CouponResponseTimezoneEUROPELONDON      CouponResponseTimezone = "EUROPE_LONDON"
	CouponResponseTimezoneEUROPEMOSCOW      CouponResponseTimezone = "EUROPE_MOSCOW"
	CouponResponseTimezoneEUROPEPARIS       CouponResponseTimezone = "EUROPE_PARIS"
	CouponResponseTimezonePACIFICHONOLULU   CouponResponseTimezone = "PACIFIC_HONOLULU"
	CouponResponseTimezonePACIFICTONGATAPU  CouponResponseTimezone = "PACIFIC_TONGATAPU"
)

// Defines values for CouponResponseVisibility.
const (
	CouponResponseVisibilityPRIVATE  CouponResponseVisibility = "PRIVATE"
	CouponResponseVisibilityPUBLIC   CouponResponseVisibility = "PUBLIC"
	CouponResponseVisibilityUNLISTED CouponResponseVisibility = "UNLISTED"
)

// Defines values for GetMessageContentTranscodingResponseStatus.
const (
	GetMessageContentTranscodingResponseStatusFailed     GetMessageContentTranscodingResponseStatus = "failed"
	GetMessageContentTranscodingResponseStatusProcessing GetMessageContentTranscodingResponseStatus = "processing"
	GetMessageContentTranscodingResponseStatusSucceeded  GetMessageContentTranscodingResponseStatus = "succeeded"
)

// Defines values for MembershipCurrency.
const (
	MembershipCurrencyJPY MembershipCurrency = "JPY"
	MembershipCurrencyTHB MembershipCurrency = "THB"
	MembershipCurrencyTWD MembershipCurrency = "TWD"
)

// Defines values for NarrowcastProgressResponsePhase.
const (
	NarrowcastProgressResponsePhaseFailed    NarrowcastProgressResponsePhase = "failed"
	NarrowcastProgressResponsePhaseSending   NarrowcastProgressResponsePhase = "sending"
	NarrowcastProgressResponsePhaseSucceeded NarrowcastProgressResponsePhase = "succeeded"
	NarrowcastProgressResponsePhaseWaiting   NarrowcastProgressResponsePhase = "waiting"
)

// Defines values for NumberOfMessagesResponseStatus.
const (
	OutOfService          NumberOfMessagesResponseStatus = "out_of_service"
	Ready                 NumberOfMessagesResponseStatus = "ready"
	UnavailableForPrivacy NumberOfMessagesResponseStatus = "unavailable_for_privacy"
	Unready               NumberOfMessagesResponseStatus = "unready"
)

// Defines values for QuotaType.
const (
	Limited QuotaType = "limited"
	None    QuotaType = "none"
)

// Defines values for RichMenuBatchProgressPhase.
const (
	Failed    RichMenuBatchProgressPhase = "failed"
	Ongoing   RichMenuBatchProgressPhase = "ongoing"
	Succeeded RichMenuBatchProgressPhase = "succeeded"
)

// Defines values for SubscribedMembershipPlanCurrency.
const (
	SubscribedMembershipPlanCurrencyJPY SubscribedMembershipPlanCurrency = "JPY"
	SubscribedMembershipPlanCurrencyTHB SubscribedMembershipPlanCurrency = "THB"
	SubscribedMembershipPlanCurrencyTWD SubscribedMembershipPlanCurrency = "TWD"
)

// Defines values for ListCouponParamsStatus.
const (
	ListCouponParamsStatusCLOSED  ListCouponParamsStatus = "CLOSED"
	ListCouponParamsStatusDRAFT   ListCouponParamsStatus = "DRAFT"
	ListCouponParamsStatusRUNNING ListCouponParamsStatus = "RUNNING"
)

// AcquisitionConditionRequest defines model for AcquisitionConditionRequest.
type AcquisitionConditionRequest struct {
	// Type Determines how the coupon is distributed or used.
	Type string `json:"type"`
}

// AcquisitionConditionResponse defines model for AcquisitionConditionResponse.
type AcquisitionConditionResponse struct {
	// Type Determines how the coupon is distributed or used.
	Type string `json:"type"`
}

// Action Action
type Action struct {
	// Label Label for the action.
	Label *string `json:"label,omitempty"`

	// Type Type of action
	Type *string `json:"type,omitempty"`
}

// BotInfoResponse defines model for BotInfoResponse.
type BotInfoResponse struct {
	// BasicId Bot's basic ID
	BasicId string `json:"basicId"`

	// ChatMode Chat settings set in the LINE Official Account Manager. One of:
	//
	// `chat`: Chat is set to "On".
	// `bot`: Chat is set to "Off".
	ChatMode BotInfoResponseChatMode `json:"chatMode"`

	// DisplayName Bot's display name
	DisplayName string `json:"displayName"`

	// MarkAsReadMode Automatic read setting for messages. If the chat is set to "Off", auto is returned. If the chat is set to "On", manual is returned.
	//
	// `auto`: Auto read setting is enabled.
	// `manual`: Auto read setting is disabled.
	//
	MarkAsReadMode BotInfoResponseMarkAsReadMode `json:"markAsReadMode"`

	// PictureUrl Profile image URL. `https` image URL. Not included in the response if the bot doesn't have a profile image.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// PremiumId Bot's premium ID. Not included in the response if the premium ID isn't set.
	PremiumId *string `json:"premiumId,omitempty"`

	// UserId Bot's user ID
	UserId string `json:"userId"`
}

// BotInfoResponseChatMode Chat settings set in the LINE Official Account Manager. One of:
//
// `chat`: Chat is set to "On".
// `bot`: Chat is set to "Off".
type BotInfoResponseChatMode string

// BotInfoResponseMarkAsReadMode Automatic read setting for messages. If the chat is set to "Off", auto is returned. If the chat is set to "On", manual is returned.
//
// `auto`: Auto read setting is enabled.
// `manual`: Auto read setting is disabled.
type BotInfoResponseMarkAsReadMode string

// BroadcastRequest defines model for BroadcastRequest.
type BroadcastRequest struct {
	// Messages List of Message objects.
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`
}

// BroadcastResponse defines model for BroadcastResponse.
type BroadcastResponse = map[string]interface{}

// ChatReference Chat reference
type ChatReference struct {
	// UserId The target user ID
	UserId string `json:"userId"`
}

// CouponCreateRequest Request object for creating a coupon. Contains all configurable coupon properties.
type CouponCreateRequest struct {
	AcquisitionCondition AcquisitionConditionRequest `json:"acquisitionCondition"`

	// BarcodeImageUrl URL of the barcode image associated with the coupon. Used for in-store redemption.
	BarcodeImageUrl *string `json:"barcodeImageUrl,omitempty"`

	// CouponCode Unique code to be presented by the user to redeem the coupon. Optional.
	CouponCode *string `json:"couponCode,omitempty"`

	// Description Detailed description of the coupon. Displayed to users.
	Description *string `json:"description,omitempty"`

	// EndTimestamp Coupon expiration time (epoch seconds). Coupon cannot be used after this time.
	EndTimestamp int64 `json:"endTimestamp"`

	// ImageUrl URL of the main image representing the coupon. Displayed in the coupon list.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// MaxUseCountPerTicket Maximum number of times a single coupon ticket can be used. Use -1 to indicate no limit.
	MaxUseCountPerTicket int32                `json:"maxUseCountPerTicket"`
	Reward               *CouponRewardRequest `json:"reward,omitempty"`

	// StartTimestamp Coupon start time (epoch seconds). Coupon can be used from this time.
	StartTimestamp int64 `json:"startTimestamp"`

	// Timezone Timezone for interpreting start and end timestamps.
	Timezone CouponCreateRequestTimezone `json:"timezone"`

	// Title Title of the coupon. Displayed in the coupon list.
	Title string `json:"title"`

	// UsageCondition Conditions for using the coupon. Shown to users.
	UsageCondition *string `json:"usageCondition,omitempty"`

	// Visibility Visibility of the coupon. Determines who can see or acquire the coupon.
	Visibility CouponCreateRequestVisibility `json:"visibility"`
}

// CouponCreateRequestTimezone Timezone for interpreting start and end timestamps.
type CouponCreateRequestTimezone string

// CouponCreateRequestVisibility Visibility of the coupon. Determines who can see or acquire the coupon.
type CouponCreateRequestVisibility string

// CouponCreateResponse Response object returned after creating a coupon. Contains the coupon ID.
type CouponCreateResponse struct {
	// CouponId Unique identifier of the coupon.
	CouponId string `json:"couponId"`
}

// CouponListResponse Summary information about a coupon, used in coupon lists.
type CouponListResponse struct {
	// CouponId Unique identifier of the coupon.
	CouponId string `json:"couponId"`

	// Title Title of the coupon. Displayed in the coupon list.
	Title string `json:"title"`
}

// CouponResponse Detailed information about a coupon, including all properties and current status.
type CouponResponse struct {
	AcquisitionCondition *AcquisitionConditionResponse `json:"acquisitionCondition,omitempty"`

	// BarcodeImageUrl URL of the barcode image associated with the coupon. Used for in-store redemption.
	BarcodeImageUrl *string `json:"barcodeImageUrl,omitempty"`

	// CouponCode Unique code to be presented by the user to redeem the coupon.
	CouponCode *string `json:"couponCode,omitempty"`

	// CouponId Unique identifier of the coupon.
	CouponId *string `json:"couponId,omitempty"`

	// CreatedTimestamp Created timestamp (seconds) of the coupon.
	CreatedTimestamp *int64 `json:"createdTimestamp,omitempty"`

	// Description Detailed description of the coupon. Displayed to users.
	Description *string `json:"description,omitempty"`

	// EndTimestamp Coupon expiration time (epoch seconds). Coupon cannot be used after this time.
	EndTimestamp *int64 `json:"endTimestamp,omitempty"`

	// ImageUrl URL of the main image representing the coupon. Displayed in the coupon list.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// MaxAcquireCount Maximum number of coupons that can be issued in total.
	MaxAcquireCount *int64 `json:"maxAcquireCount,omitempty"`

	// MaxTicketPerUser Maximum number of coupon tickets a single user can acquire.
	MaxTicketPerUser *int64 `json:"maxTicketPerUser,omitempty"`

	// MaxUseCountPerTicket Maximum number of times a single coupon ticket can be used.
	MaxUseCountPerTicket *int32                `json:"maxUseCountPerTicket,omitempty"`
	Reward               *CouponRewardResponse `json:"reward,omitempty"`

	// StartTimestamp Coupon start time (epoch seconds). Coupon can be used from this time.
	StartTimestamp *int64 `json:"startTimestamp,omitempty"`

	// Status Current status of the coupon.
	Status *CouponResponseStatus `json:"status,omitempty"`

	// Timezone Timezone for interpreting start and end timestamps.
	Timezone *CouponResponseTimezone `json:"timezone,omitempty"`

	// Title Title of the coupon. Displayed in the coupon list.
	Title *string `json:"title,omitempty"`

	// UsageCondition Conditions for using the coupon. Shown to users.
	UsageCondition *string `json:"usageCondition,omitempty"`

	// Visibility Visibility of the coupon. Determines who can see or acquire the coupon.
	Visibility *CouponResponseVisibility `json:"visibility,omitempty"`
}

// CouponResponseStatus Current status of the coupon.
type CouponResponseStatus string

// CouponResponseTimezone Timezone for interpreting start and end timestamps.
type CouponResponseTimezone string

// CouponResponseVisibility Visibility of the coupon. Determines who can see or acquire the coupon.
type CouponResponseVisibility string

// CouponRewardRequest defines model for CouponRewardRequest.
type CouponRewardRequest struct {
	// Type Type of coupon. Determines the benefit provided.
	Type string `json:"type"`
}

// CouponRewardResponse defines model for CouponRewardResponse.
type CouponRewardResponse struct {
	// Type Type of coupon. Determines the benefit provided.
	Type string `json:"type"`
}

// CreateRichMenuAliasRequest defines model for CreateRichMenuAliasRequest.
type CreateRichMenuAliasRequest struct {
	// RichMenuAliasId Rich menu alias ID, which can be any ID, unique for each channel.
	RichMenuAliasId string `json:"richMenuAliasId"`

	// RichMenuId The rich menu ID to be associated with the rich menu alias.
	RichMenuId string `json:"richMenuId"`
}

// DemographicFilter Demographic filter
type DemographicFilter struct {
	// Type Type of demographic filter
	Type *string `json:"type,omitempty"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Message Details of the error. Not included in the response under certain situations.
	Message *string `json:"message,omitempty"`

	// Property Location of where the error occurred. Returns the JSON field name or query parameter name of the request. Not included in the response under certain situations.
	Property *string `json:"property,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Details An array of error details. If the array is empty, this property will not be included in the response.
	Details *[]ErrorDetail `json:"details,omitempty"`

	// Message Message containing information about the error.
	Message string `json:"message"`

	// SentMessages Array of sent messages.
	SentMessages *[]SentMessage `json:"sentMessages,omitempty"`
}

// Filter Filter for narrowcast
type Filter struct {
	// Demographic Demographic filter
	Demographic *DemographicFilter `json:"demographic,omitempty"`
}

// GetAggregationUnitNameListResponse defines model for GetAggregationUnitNameListResponse.
type GetAggregationUnitNameListResponse struct {
	// CustomAggregationUnits An array of strings indicating the names of aggregation units used this month.
	CustomAggregationUnits []string `json:"customAggregationUnits"`

	// Next A continuation token to get the next array of unit names.
	// Returned only when there are remaining aggregation units that weren't returned in customAggregationUnits in the original request.
	//
	Next *string `json:"next,omitempty"`
}

// GetAggregationUnitUsageResponse defines model for GetAggregationUnitUsageResponse.
type GetAggregationUnitUsageResponse struct {
	// NumOfCustomAggregationUnits Number of aggregation units used this month.
	NumOfCustomAggregationUnits int64 `json:"numOfCustomAggregationUnits"`
}

// GetFollowersResponse defines model for GetFollowersResponse.
type GetFollowersResponse struct {
	// Next A continuation token to get the next array of user IDs.
	// Returned only when there are remaining user IDs that weren't returned in `userIds` in the original request.
	// The number of user IDs in the `userIds` element doesn't have to reach the maximum number specified by `limit` for the `next` property to be included in the response.
	//
	Next *string `json:"next,omitempty"`

	// UserIds An array of strings indicating user IDs of users that have added the LINE Official Account as a friend.
	// Only users of LINE for iOS and LINE for Android are included in `userIds`.
	UserIds []string `json:"userIds"`
}

// GetJoinedMembershipUsersResponse List of users who have joined the membership
type GetJoinedMembershipUsersResponse struct {
	// Next A continuation token to get next remaining membership user IDs.
	// Returned only when there are remaining user IDs that weren't returned in the userIds property in the previous request.
	// The continuation token expires in 24 hours (86,400 seconds).
	//
	Next *string `json:"next,omitempty"`

	// UserIds A list of user IDs who joined the membership.
	// Users who have not agreed to the bot user agreement, are not following the bot, or are not active will be excluded.
	// If there are no users in the membership, an empty list will be returned.
	UserIds []string `json:"userIds"`
}

// GetMembershipSubscriptionResponse A user's membership subscription status
type GetMembershipSubscriptionResponse struct {
	// Subscriptions List of subscription information
	Subscriptions []Subscription `json:"subscriptions"`
}

// GetMessageContentTranscodingResponse Transcoding response
type GetMessageContentTranscodingResponse struct {
	// Status The preparation status. One of:
	//
	// `processing`: Preparing to get content.
	// `succeeded`: Ready to get the content. You can get the content sent by users.
	// `failed`: Failed to prepare to get the content.
	Status GetMessageContentTranscodingResponseStatus `json:"status"`
}

// GetMessageContentTranscodingResponseStatus The preparation status. One of:
//
// `processing`: Preparing to get content.
// `succeeded`: Ready to get the content. You can get the content sent by users.
// `failed`: Failed to prepare to get the content.
type GetMessageContentTranscodingResponseStatus string

// GetWebhookEndpointResponse defines model for GetWebhookEndpointResponse.
type GetWebhookEndpointResponse struct {
	// Active Webhook usage status. Send a webhook event from the LINE Platform to the webhook URL only if enabled.
	//
	// `true`: Webhook usage is enabled.
	// `false`: Webhook usage is disabled.
	Active bool `json:"active"`

	// Endpoint Webhook URL
	Endpoint string `json:"endpoint"`
}

// GroupMemberCountResponse defines model for GroupMemberCountResponse.
type GroupMemberCountResponse struct {
	// Count The count of members in the group chat. The number returned excludes the LINE Official Account.
	Count int32 `json:"count"`
}

// GroupSummaryResponse defines model for GroupSummaryResponse.
type GroupSummaryResponse struct {
	// GroupId Group ID
	GroupId string `json:"groupId"`

	// GroupName Group name
	GroupName string `json:"groupName"`

	// PictureUrl Group icon URL. Not included in the response if the user doesn't set a group profile icon.
	PictureUrl *string `json:"pictureUrl,omitempty"`
}

// GroupUserProfileResponse defines model for GroupUserProfileResponse.
type GroupUserProfileResponse struct {
	// DisplayName User's display name
	DisplayName string `json:"displayName"`

	// PictureUrl Profile image URL. `https` image URL. Not included in the response if the user doesn't have a profile image.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// UserId User ID
	UserId string `json:"userId"`
}

// IssueLinkTokenResponse defines model for IssueLinkTokenResponse.
type IssueLinkTokenResponse struct {
	// LinkToken Link token.
	// Link tokens are valid for 10 minutes and can only be used once.
	//
	LinkToken string `json:"linkToken"`
}

// Limit Limit of the Narrowcast
type Limit struct {
	// Max The maximum number of narrowcast messages to send.
	// Use this parameter to limit the number of narrowcast messages sent.
	// The recipients will be chosen at random.
	Max *int32 `json:"max,omitempty"`

	// UpToRemainingQuota If true, the message will be sent within the maximum number of deliverable messages. The default value is `false`.
	//
	// Targets will be selected at random.
	UpToRemainingQuota *bool `json:"upToRemainingQuota,omitempty"`
}

// MarkMessagesAsReadRequest defines model for MarkMessagesAsReadRequest.
type MarkMessagesAsReadRequest struct {
	// Chat Chat reference
	Chat ChatReference `json:"chat"`
}

// MembersIdsResponse defines model for MembersIdsResponse.
type MembersIdsResponse struct {
	// MemberIds List of user IDs of members in the group chat. Only users of LINE for iOS and LINE for Android are included in `memberIds`.
	MemberIds []string `json:"memberIds"`

	// Next A continuation token to get the next array of user IDs of the members in the group chat.
	// Returned only when there are remaining user IDs that were not returned in `memberIds` in the original request.
	Next *string `json:"next,omitempty"`
}

// Membership defines model for Membership.
type Membership struct {
	// Benefits List of membership plan perks.
	Benefits []string `json:"benefits"`

	// Currency The currency of membership.price.
	Currency MembershipCurrency `json:"currency"`

	// Description Membership plan description.
	Description string `json:"description"`

	// IsInAppPurchase Payment method for users who subscribe to a membership plan.
	IsInAppPurchase bool `json:"isInAppPurchase"`

	// IsPublished Membership plan status.
	IsPublished bool `json:"isPublished"`

	// MemberCount Number of members subscribed to the membership plan.
	MemberCount int `json:"memberCount"`

	// MemberLimit The upper limit of members who can subscribe. If no upper limit is set, it will be null.
	MemberLimit *int `json:"memberLimit"`

	// MembershipId Membership plan ID.
	MembershipId int `json:"membershipId"`

	// Price Monthly fee for membership plan. (e.g. 1500.00)
	Price float64 `json:"price"`

	// Title Membership plan name.
	Title string `json:"title"`
}

// MembershipCurrency The currency of membership.price.
type MembershipCurrency string

// MembershipListResponse List of memberships
type MembershipListResponse struct {
	// Memberships List of membership information
	Memberships []Membership `json:"memberships"`
}

// Message defines model for Message.
type Message struct {
	// QuickReply Quick reply
	QuickReply *QuickReply `json:"quickReply,omitempty"`

	// Sender Change icon and display name
	Sender *Sender `json:"sender,omitempty"`

	// Type Type of message
	Type string `json:"type"`
}

// MessageQuotaResponse defines model for MessageQuotaResponse.
type MessageQuotaResponse struct {
	// Type One of the following values to indicate whether a target limit is set or not.
	Type QuotaType `json:"type"`

	// Value The target limit for sending messages in the current month. This property is returned when the `type` property has a value of `limited`.
	Value *int64 `json:"value,omitempty"`
}

// MessagingApiPagerCouponListResponse Paginated response object containing a list of coupons.
type MessagingApiPagerCouponListResponse struct {
	// Items List of coupon summary objects.
	Items []CouponListResponse `json:"items"`

	// Next Token for fetching the next page of results.
	Next *string `json:"next,omitempty"`
}

// MulticastRequest defines model for MulticastRequest.
type MulticastRequest struct {
	// CustomAggregationUnits Name of aggregation unit. Case-sensitive.
	CustomAggregationUnits *[]string `json:"customAggregationUnits,omitempty"`

	// Messages Messages to send
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`

	// To Array of user IDs. Use userId values which are returned in webhook event objects. Do not use LINE IDs found on LINE.
	To []string `json:"to"`
}

// MulticastResponse defines model for MulticastResponse.
type MulticastResponse = map[string]interface{}

// NarrowcastProgressResponse defines model for NarrowcastProgressResponse.
type NarrowcastProgressResponse struct {
	// AcceptedTime Narrowcast message request accepted time in milliseconds.
	//
	// Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z)
	// Timezone: UTC
	AcceptedTime time.Time `json:"acceptedTime"`

	// CompletedTime Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.
	//
	// Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z)
	// Timezone: UTC
	CompletedTime *time.Time `json:"completedTime,omitempty"`

	// ErrorCode Error summary. This is only included with a phase property value of failed.
	// One of:
	//
	// `1`: An internal error occurred.
	// `2`: An error occurred because there weren't enough recipients.
	// `3`: A conflict error of requests occurs because a request that has already been accepted is retried.
	// `4`: An audience of less than 50 recipients is included as a condition of sending.
	ErrorCode *int64 `json:"errorCode,omitempty"`

	// FailedDescription The reason the message failed to be sent. This is only included with a `phase` property value of `failed`.
	FailedDescription *string `json:"failedDescription,omitempty"`

	// FailureCount The number of users who failed to send the message.
	FailureCount *int64 `json:"failureCount,omitempty"`

	// Phase The current status. One of:
	//
	// `waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way.
	// `sending`: Messages are currently being sent.
	// `succeeded`: Messages were sent successfully. This may not mean the messages were successfully received.
	// `failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.
	Phase NarrowcastProgressResponsePhase `json:"phase"`

	// SuccessCount The number of users who successfully received the message.
	SuccessCount *int64 `json:"successCount,omitempty"`

	// TargetCount The number of intended recipients of the message.
	TargetCount *int64 `json:"targetCount,omitempty"`
}

// NarrowcastProgressResponsePhase The current status. One of:
//
// `waiting`: Messages are not yet ready to be sent. They are currently being filtered or processed in some way.
// `sending`: Messages are currently being sent.
// `succeeded`: Messages were sent successfully. This may not mean the messages were successfully received.
// `failed`: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.
type NarrowcastProgressResponsePhase string

// NarrowcastRequest defines model for NarrowcastRequest.
type NarrowcastRequest struct {
	// Filter Filter for narrowcast
	Filter *Filter `json:"filter,omitempty"`

	// Limit Limit of the Narrowcast
	Limit *Limit `json:"limit,omitempty"`

	// Messages List of Message objects.
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`

	// Recipient Recipient
	Recipient *Recipient `json:"recipient,omitempty"`
}

// NarrowcastResponse defines model for NarrowcastResponse.
type NarrowcastResponse = map[string]interface{}

// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
// The default value is false.
type NotificationDisabled = bool

// NumberOfMessagesResponse defines model for NumberOfMessagesResponse.
type NumberOfMessagesResponse struct {
	// Status Aggregation process status. One of:
	//
	// `ready`: The number of messages can be obtained.
	// `unready`: We haven't finished calculating the number of sent messages for the specified in date. For example, this property is returned when the delivery date or a future date is specified. Calculation usually takes about a day.
	// `unavailable_for_privacy`: The total number of messages on the specified day is less than 20.
	// `out_of_service`: The specified date is earlier than the date on which we first started calculating sent messages (March 31, 2018).
	Status NumberOfMessagesResponseStatus `json:"status"`

	// Success The number of messages delivered using the phone number on the date specified in `date`.
	// The response has this property only when the value of `status` is `ready`.
	//
	Success *int64 `json:"success,omitempty"`
}

// NumberOfMessagesResponseStatus Aggregation process status. One of:
//
// `ready`: The number of messages can be obtained.
// `unready`: We haven't finished calculating the number of sent messages for the specified in date. For example, this property is returned when the delivery date or a future date is specified. Calculation usually takes about a day.
// `unavailable_for_privacy`: The total number of messages on the specified day is less than 20.
// `out_of_service`: The specified date is earlier than the date on which we first started calculating sent messages (March 31, 2018).
type NumberOfMessagesResponseStatus string

// PnpMessagesRequest defines model for PnpMessagesRequest.
type PnpMessagesRequest struct {
	// Messages Message to be sent.
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`

	// To Message destination. Specify a phone number that has been normalized to E.164 format and hashed with SHA256.
	To string `json:"to"`
}

// PushMessageRequest defines model for PushMessageRequest.
type PushMessageRequest struct {
	// CustomAggregationUnits List of aggregation unit name. Case-sensitive.
	// This functions can only be used by corporate users who have submitted the required applications.
	CustomAggregationUnits *[]string `json:"customAggregationUnits,omitempty"`

	// Messages List of Message objects.
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`

	// To ID of the receiver.
	To string `json:"to"`
}

// PushMessageResponse defines model for PushMessageResponse.
type PushMessageResponse struct {
	// SentMessages Array of sent messages.
	SentMessages []SentMessage `json:"sentMessages"`
}

// QuickReply Quick reply
type QuickReply struct {
	// Items Quick reply button objects.
	Items *[]QuickReplyItem `json:"items,omitempty"`
}

// QuickReplyItem defines model for QuickReplyItem.
type QuickReplyItem struct {
	// Action Action
	Action *Action `json:"action,omitempty"`

	// ImageUrl URL of the icon that is displayed at the beginning of the button
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Type `action`
	Type *string `json:"type,omitempty"`
}

// QuotaConsumptionResponse defines model for QuotaConsumptionResponse.
type QuotaConsumptionResponse struct {
	// TotalUsage The number of sent messages in the current month
	TotalUsage int64 `json:"totalUsage"`
}

// QuotaType One of the following values to indicate whether a target limit is set or not.
type QuotaType string

// Recipient Recipient
type Recipient struct {
	// Type Type of recipient
	Type *string `json:"type,omitempty"`
}

// ReplyMessageRequest defines model for ReplyMessageRequest.
type ReplyMessageRequest struct {
	// Messages List of messages.
	Messages []Message `json:"messages"`

	// NotificationDisabled `true`: The user doesn’t receive a push notification when a message is sent.
	// `false`: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device).
	// The default value is false.
	NotificationDisabled *NotificationDisabled `json:"notificationDisabled,omitempty"`

	// ReplyToken replyToken received via webhook.
	ReplyToken string `json:"replyToken"`
}

// ReplyMessageResponse defines model for ReplyMessageResponse.
type ReplyMessageResponse struct {
	// SentMessages Array of sent messages.
	SentMessages []SentMessage `json:"sentMessages"`
}

// RichMenuAliasListResponse defines model for RichMenuAliasListResponse.
type RichMenuAliasListResponse struct {
	// Aliases Rich menu aliases.
	Aliases []RichMenuAliasResponse `json:"aliases"`
}

// RichMenuAliasResponse defines model for RichMenuAliasResponse.
type RichMenuAliasResponse struct {
	// RichMenuAliasId Rich menu alias ID.
	RichMenuAliasId string `json:"richMenuAliasId"`

	// RichMenuId The rich menu ID associated with the rich menu alias.
	RichMenuId string `json:"richMenuId"`
}

// RichMenuArea Rich menu area
type RichMenuArea struct {
	// Action Action
	Action *Action `json:"action,omitempty"`

	// Bounds Rich menu bounds
	Bounds *RichMenuBounds `json:"bounds,omitempty"`
}

// RichMenuBatchOperation Rich menu operation object represents the batch operation to the rich menu linked to the user.
type RichMenuBatchOperation struct {
	// Type The type of operation to the rich menu linked to the user. One of link, unlink, or unlinkAll.
	Type string `json:"type"`
}

// RichMenuBatchProgressPhase The current status. One of:
//
// `ongoing`: Rich menu batch control is in progress.
// `succeeded`: Rich menu batch control is complete.
// `failed`: Rich menu batch control failed.
//
//	This means that the rich menu for one or more users couldn't be controlled.
//	There may also be users whose operations have been successfully completed.
type RichMenuBatchProgressPhase string

// RichMenuBatchProgressResponse defines model for RichMenuBatchProgressResponse.
type RichMenuBatchProgressResponse struct {
	// AcceptedTime The accepted time in milliseconds of the request of batch control the rich menu.
	//
	// Format: ISO 8601 (e.g. 2023-06-08T10:15:30.121Z)
	// Timezone: UTC
	AcceptedTime time.Time `json:"acceptedTime"`

	// CompletedTime The completed time in milliseconds of rich menu batch control. Returned when the phase property is succeeded or failed.
	//
	// Format: ISO 8601 (e.g. 2023-06-08T10:15:30.121Z)
	// Timezone: UTC
	CompletedTime *time.Time `json:"completedTime,omitempty"`

	// Phase The current status. One of:
	//
	// `ongoing`: Rich menu batch control is in progress.
	// `succeeded`: Rich menu batch control is complete.
	// `failed`: Rich menu batch control failed.
	//           This means that the rich menu for one or more users couldn't be controlled.
	//           There may also be users whose operations have been successfully completed.
	Phase RichMenuBatchProgressPhase `json:"phase"`
}

// RichMenuBatchRequest defines model for RichMenuBatchRequest.
type RichMenuBatchRequest struct {
	// Operations Array of Rich menu operation object...
	Operations []RichMenuBatchOperation `json:"operations"`

	// ResumeRequestKey Key for retry. Key value is a string matching the regular expression pattern
	ResumeRequestKey *string `json:"resumeRequestKey,omitempty"`
}

// RichMenuBounds Rich menu bounds
type RichMenuBounds struct {
	// Height Height of the area.
	Height *int64 `json:"height,omitempty"`

	// Width Width of the area.
	Width *int64 `json:"width,omitempty"`

	// X Horizontal position relative to the top-left corner of the area.
	X *int64 `json:"x,omitempty"`

	// Y Vertical position relative to the top-left corner of the area.
	Y *int64 `json:"y,omitempty"`
}

// RichMenuBulkLinkRequest defines model for RichMenuBulkLinkRequest.
type RichMenuBulkLinkRequest struct {
	// RichMenuId ID of a rich menu
	RichMenuId string `json:"richMenuId"`

	// UserIds Array of user IDs. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
	UserIds []string `json:"userIds"`
}

// RichMenuBulkUnlinkRequest defines model for RichMenuBulkUnlinkRequest.
type RichMenuBulkUnlinkRequest struct {
	// UserIds Array of user IDs. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
	UserIds []string `json:"userIds"`
}

// RichMenuIdResponse defines model for RichMenuIdResponse.
type RichMenuIdResponse struct {
	// RichMenuId Rich menu ID
	RichMenuId string `json:"richMenuId"`
}

// RichMenuListResponse defines model for RichMenuListResponse.
type RichMenuListResponse struct {
	// Richmenus Rich menus
	Richmenus []RichMenuResponse `json:"richmenus"`
}

// RichMenuRequest defines model for RichMenuRequest.
type RichMenuRequest struct {
	// Areas Array of area objects which define the coordinates and size of tappable areas
	Areas *[]RichMenuArea `json:"areas,omitempty"`

	// ChatBarText Text displayed in the chat bar
	ChatBarText *string `json:"chatBarText,omitempty"`

	// Name Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.
	Name *string `json:"name,omitempty"`

	// Selected `true` to display the rich menu by default. Otherwise, `false`.
	Selected *bool `json:"selected,omitempty"`

	// Size Rich menu size
	Size *RichMenuSize `json:"size,omitempty"`
}

// RichMenuResponse defines model for RichMenuResponse.
type RichMenuResponse struct {
	// Areas Array of area objects which define the coordinates and size of tappable areas
	Areas []RichMenuArea `json:"areas"`

	// ChatBarText Text displayed in the chat bar
	ChatBarText string `json:"chatBarText"`

	// Name Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.
	Name string `json:"name"`

	// RichMenuId ID of a rich menu
	RichMenuId string `json:"richMenuId"`

	// Selected `true` to display the rich menu by default. Otherwise, `false`.
	Selected bool `json:"selected"`

	// Size Rich menu size
	Size RichMenuSize `json:"size"`
}

// RichMenuSize Rich menu size
type RichMenuSize struct {
	// Height height
	Height *int64 `json:"height,omitempty"`

	// Width width
	Width *int64 `json:"width,omitempty"`
}

// RoomMemberCountResponse defines model for RoomMemberCountResponse.
type RoomMemberCountResponse struct {
	// Count The count of members in the multi-person chat. The number returned excludes the LINE Official Account.
	Count int32 `json:"count"`
}

// RoomUserProfileResponse defines model for RoomUserProfileResponse.
type RoomUserProfileResponse struct {
	// DisplayName User's display name
	DisplayName string `json:"displayName"`

	// PictureUrl Profile image URL. `https` image URL. Not included in the response if the user doesn't have a profile image.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// UserId User ID
	UserId string `json:"userId"`
}

// Sender Change icon and display name
type Sender struct {
	// IconUrl URL of the image to display as an icon when sending a message
	IconUrl *string `json:"iconUrl,omitempty"`

	// Name Display name. Certain words such as `LINE` may not be used.
	Name *string `json:"name,omitempty"`
}

// SentMessage defines model for SentMessage.
type SentMessage struct {
	// Id ID of the sent message.
	Id string `json:"id"`

	// QuoteToken Quote token of the message. Only included when a message object that can be specified as a quote target was sent as a push or reply message.
	QuoteToken *string `json:"quoteToken,omitempty"`
}

// SetWebhookEndpointRequest defines model for SetWebhookEndpointRequest.
type SetWebhookEndpointRequest struct {
	// Endpoint A valid webhook URL.
	Endpoint string `json:"endpoint"`
}

// ShowLoadingAnimationRequest defines model for ShowLoadingAnimationRequest.
type ShowLoadingAnimationRequest struct {
	// ChatId User ID of the target user for whom the loading animation is to be displayed.
	ChatId string `json:"chatId"`

	// LoadingSeconds The number of seconds to display the loading indicator.
	// It must be a multiple of 5. The maximum value is 60 seconds.
	LoadingSeconds *int32 `json:"loadingSeconds,omitempty"`
}

// ShowLoadingAnimationResponse defines model for ShowLoadingAnimationResponse.
type ShowLoadingAnimationResponse = map[string]interface{}

// SubscribedMembershipPlan Object containing information about the membership plan.
type SubscribedMembershipPlan struct {
	// Benefits List of membership plan perks.
	Benefits []string `json:"benefits"`

	// Currency The currency of membership.price.
	Currency SubscribedMembershipPlanCurrency `json:"currency"`

	// Description Membership plan description.
	Description string `json:"description"`

	// MembershipId Membership plan ID.
	MembershipId int `json:"membershipId"`

	// Price Monthly fee for membership plan. (e.g. 1500.00)
	Price float64 `json:"price"`

	// Title Membership plan name.
	Title string `json:"title"`
}

// SubscribedMembershipPlanCurrency The currency of membership.price.
type SubscribedMembershipPlanCurrency string

// SubscribedMembershipUser Object containing user membership subscription information.
type SubscribedMembershipUser struct {
	// JoinedTime UNIX timestamp at which the user subscribed to the membership.
	JoinedTime int `json:"joinedTime"`

	// MembershipNo The user's member number in the membership plan.
	MembershipNo int `json:"membershipNo"`

	// NextBillingDate Next payment date for membership plan.
	// - Format: yyyy-MM-dd (e.g. 2024-02-08)
	// - Timezone: UTC+9
	NextBillingDate string `json:"nextBillingDate"`

	// TotalSubscriptionMonths The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.
	TotalSubscriptionMonths int `json:"totalSubscriptionMonths"`
}

// Subscription An array of memberships.
type Subscription struct {
	// Membership Object containing information about the membership plan.
	Membership SubscribedMembershipPlan `json:"membership"`

	// User Object containing user membership subscription information.
	User SubscribedMembershipUser `json:"user"`
}

// TestWebhookEndpointRequest defines model for TestWebhookEndpointRequest.
type TestWebhookEndpointRequest struct {
	// Endpoint A webhook URL to be validated.
	Endpoint *string `json:"endpoint,omitempty"`
}

// TestWebhookEndpointResponse defines model for TestWebhookEndpointResponse.
type TestWebhookEndpointResponse struct {
	// Detail Details of the response.
	Detail string `json:"detail"`

	// Reason Reason for the response.
	Reason string `json:"reason"`

	// StatusCode The HTTP status code. If the webhook response isn't received, the status code is set to zero or a negative number.
	StatusCode int32 `json:"statusCode"`

	// Success Result of the communication from the LINE platform to the webhook URL.
	Success *bool `json:"success,omitempty"`

	// Timestamp Time of the event in milliseconds. Even in the case of a redelivered webhook, it represents the time the event occurred, not the time it was redelivered.
	Timestamp time.Time `json:"timestamp"`
}

// UpdateRichMenuAliasRequest defines model for UpdateRichMenuAliasRequest.
type UpdateRichMenuAliasRequest struct {
	// RichMenuId The rich menu ID to be associated with the rich menu alias.
	RichMenuId string `json:"richMenuId"`
}

// UserProfileResponse defines model for UserProfileResponse.
type UserProfileResponse struct {
	// DisplayName User's display name
	DisplayName string `json:"displayName"`

	// Language User's language, as a BCP 47 language tag. Not included in the response if the user hasn't yet consented to the LINE Privacy Policy.
	Language *string `json:"language,omitempty"`

	// PictureUrl Profile image URL. `https` image URL. Not included in the response if the user doesn't have a profile image.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// StatusMessage User's status message. Not included in the response if the user doesn't have a status message.
	StatusMessage *string `json:"statusMessage,omitempty"`

	// UserId User ID
	UserId string `json:"userId"`
}

// ValidateMessageRequest defines model for ValidateMessageRequest.
type ValidateMessageRequest struct {
	// Messages Array of message objects to validate
	Messages []Message `json:"messages"`
}

// PushMessagesByPhoneParams defines parameters for PushMessagesByPhone.
type PushMessagesByPhoneParams struct {
	// XLineDeliveryTag String returned in the delivery.data property of the delivery completion event via Webhook.
	XLineDeliveryTag *string `json:"X-Line-Delivery-Tag,omitempty"`
}

// ListCouponParams defines parameters for ListCoupon.
type ListCouponParams struct {
	// Status Filter coupons by their status.
	Status *[]ListCouponParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Start Pagination token to retrieve the next page of results.
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Limit Maximum number of coupons to return per request.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListCouponParamsStatus defines parameters for ListCoupon.
type ListCouponParamsStatus string

// GetFollowersParams defines parameters for GetFollowers.
type GetFollowersParams struct {
	// Start Value of the continuation token found in the next property of the JSON object returned in the response.
	// Include this parameter to get the next array of user IDs.
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Limit The maximum number of user IDs to retrieve in a single request.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetGroupMembersIdsParams defines parameters for GetGroupMembersIds.
type GetGroupMembersIdsParams struct {
	// Start Value of the continuation token found in the `next` property of the JSON object returned in the response.
	// Include this parameter to get the next array of user IDs for the members of the group.
	Start *string `form:"start,omitempty" json:"start,omitempty"`
}

// GetJoinedMembershipUsersParams defines parameters for GetJoinedMembershipUsers.
type GetJoinedMembershipUsersParams struct {
	// Start A continuation token to get next remaining membership user IDs.
	// Returned only when there are remaining user IDs that weren't returned in the userIds property in the previous request.
	// The continuation token expires in 24 hours (86,400 seconds).
	Start *string `form:"start,omitempty" json:"start,omitempty"`

	// Limit The max number of items to return for this API call.
	// The value is set to 300 by default, but the max acceptable value is 1000.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAggregationUnitNameListParams defines parameters for GetAggregationUnitNameList.
type GetAggregationUnitNameListParams struct {
	// Limit The maximum number of aggregation units you can get per request.
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Start Value of the continuation token found in the next property of the JSON object returned in the response.
	// If you can't get all the aggregation units in one request, include this parameter to get the remaining array.
	Start *string `form:"start,omitempty" json:"start,omitempty"`
}

// BroadcastParams defines parameters for Broadcast.
type BroadcastParams struct {
	// XLineRetryKey Retry key.
	// Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method.
	// The retry key isn't generated by LINE. Each developer must generate their own retry key.
	XLineRetryKey *openapi_types.UUID `json:"X-Line-Retry-Key,omitempty"`
}

// GetNumberOfSentBroadcastMessagesParams defines parameters for GetNumberOfSentBroadcastMessages.
type GetNumberOfSentBroadcastMessagesParams struct {
	// Date Date the messages were sent
	//
	// Format: yyyyMMdd (e.g. 20191231)
	// Timezone: UTC+9
	Date string `form:"date" json:"date"`
}

// GetNumberOfSentMulticastMessagesParams defines parameters for GetNumberOfSentMulticastMessages.
type GetNumberOfSentMulticastMessagesParams struct {
	// Date Date the messages were sent
	//
	// Format: `yyyyMMdd` (e.g. `20191231`)
	// Timezone: UTC+9
	Date string `form:"date" json:"date"`
}

// GetPNPMessageStatisticsParams defines parameters for GetPNPMessageStatistics.
type GetPNPMessageStatisticsParams struct {
	// Date Date the message was sent
	//
	// Format: `yyyyMMdd` (Example:`20211231`)
	// Time zone: UTC+9
	Date string `form:"date" json:"date"`
}

// GetNumberOfSentPushMessagesParams defines parameters for GetNumberOfSentPushMessages.
type GetNumberOfSentPushMessagesParams struct {
	// Date Date the messages were sent
	//
	// Format: `yyyyMMdd` (e.g. `20191231`)
	// Timezone: UTC+9
	Date string `form:"date" json:"date"`
}

// GetNumberOfSentReplyMessagesParams defines parameters for GetNumberOfSentReplyMessages.
type GetNumberOfSentReplyMessagesParams struct {
	// Date Date the messages were sent
	//
	// Format: `yyyyMMdd` (e.g. `20191231`)
	// Timezone: UTC+9
	Date string `form:"date" json:"date"`
}

// MulticastParams defines parameters for Multicast.
type MulticastParams struct {
	// XLineRetryKey Retry key.
	// Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method.
	// The retry key isn't generated by LINE. Each developer must generate their own retry key.
	XLineRetryKey *openapi_types.UUID `json:"X-Line-Retry-Key,omitempty"`
}

// NarrowcastParams defines parameters for Narrowcast.
type NarrowcastParams struct {
	// XLineRetryKey Retry key.
	// Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method.
	// The retry key isn't generated by LINE. Each developer must generate their own retry key.
	XLineRetryKey *openapi_types.UUID `json:"X-Line-Retry-Key,omitempty"`
}

// GetNarrowcastProgressParams defines parameters for GetNarrowcastProgress.
type GetNarrowcastProgressParams struct {
	// RequestId The narrowcast message's request ID. Each Messaging API request has a request ID.
	RequestId string `form:"requestId" json:"requestId"`
}

// PushMessageParams defines parameters for PushMessage.
type PushMessageParams struct {
	// XLineRetryKey Retry key.
	// Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method.
	// The retry key isn't generated by LINE. Each developer must generate their own retry key.
	XLineRetryKey *openapi_types.UUID `json:"X-Line-Retry-Key,omitempty"`
}

// GetRichMenuBatchProgressParams defines parameters for GetRichMenuBatchProgress.
type GetRichMenuBatchProgressParams struct {
	// RequestId A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
	RequestId string `form:"requestId" json:"requestId"`
}

// GetRoomMembersIdsParams defines parameters for GetRoomMembersIds.
type GetRoomMembersIdsParams struct {
	// Start Value of the continuation token found in the `next` property of the JSON object returned in the response.
	// Include this parameter to get the next array of user IDs for the members of the group.
	Start *string `form:"start,omitempty" json:"start,omitempty"`
}

// PushMessagesByPhoneJSONRequestBody defines body for PushMessagesByPhone for application/json ContentType.
type PushMessagesByPhoneJSONRequestBody = PnpMessagesRequest

// SetWebhookEndpointJSONRequestBody defines body for SetWebhookEndpoint for application/json ContentType.
type SetWebhookEndpointJSONRequestBody = SetWebhookEndpointRequest

// TestWebhookEndpointJSONRequestBody defines body for TestWebhookEndpoint for application/json ContentType.
type TestWebhookEndpointJSONRequestBody = TestWebhookEndpointRequest

// ShowLoadingAnimationJSONRequestBody defines body for ShowLoadingAnimation for application/json ContentType.
type ShowLoadingAnimationJSONRequestBody = ShowLoadingAnimationRequest

// CreateCouponJSONRequestBody defines body for CreateCoupon for application/json ContentType.
type CreateCouponJSONRequestBody = CouponCreateRequest

// BroadcastJSONRequestBody defines body for Broadcast for application/json ContentType.
type BroadcastJSONRequestBody = BroadcastRequest

// MarkMessagesAsReadJSONRequestBody defines body for MarkMessagesAsRead for application/json ContentType.
type MarkMessagesAsReadJSONRequestBody = MarkMessagesAsReadRequest

// MulticastJSONRequestBody defines body for Multicast for application/json ContentType.
type MulticastJSONRequestBody = MulticastRequest

// NarrowcastJSONRequestBody defines body for Narrowcast for application/json ContentType.
type NarrowcastJSONRequestBody = NarrowcastRequest

// PushMessageJSONRequestBody defines body for PushMessage for application/json ContentType.
type PushMessageJSONRequestBody = PushMessageRequest

// ReplyMessageJSONRequestBody defines body for ReplyMessage for application/json ContentType.
type ReplyMessageJSONRequestBody = ReplyMessageRequest

// ValidateBroadcastJSONRequestBody defines body for ValidateBroadcast for application/json ContentType.
type ValidateBroadcastJSONRequestBody = ValidateMessageRequest

// ValidateMulticastJSONRequestBody defines body for ValidateMulticast for application/json ContentType.
type ValidateMulticastJSONRequestBody = ValidateMessageRequest

// ValidateNarrowcastJSONRequestBody defines body for ValidateNarrowcast for application/json ContentType.
type ValidateNarrowcastJSONRequestBody = ValidateMessageRequest

// ValidatePushJSONRequestBody defines body for ValidatePush for application/json ContentType.
type ValidatePushJSONRequestBody = ValidateMessageRequest

// ValidateReplyJSONRequestBody defines body for ValidateReply for application/json ContentType.
type ValidateReplyJSONRequestBody = ValidateMessageRequest

// CreateRichMenuJSONRequestBody defines body for CreateRichMenu for application/json ContentType.
type CreateRichMenuJSONRequestBody = RichMenuRequest

// CreateRichMenuAliasJSONRequestBody defines body for CreateRichMenuAlias for application/json ContentType.
type CreateRichMenuAliasJSONRequestBody = CreateRichMenuAliasRequest

// UpdateRichMenuAliasJSONRequestBody defines body for UpdateRichMenuAlias for application/json ContentType.
type UpdateRichMenuAliasJSONRequestBody = UpdateRichMenuAliasRequest

// RichMenuBatchJSONRequestBody defines body for RichMenuBatch for application/json ContentType.
type RichMenuBatchJSONRequestBody = RichMenuBatchRequest

// LinkRichMenuIdToUsersJSONRequestBody defines body for LinkRichMenuIdToUsers for application/json ContentType.
type LinkRichMenuIdToUsersJSONRequestBody = RichMenuBulkLinkRequest

// UnlinkRichMenuIdFromUsersJSONRequestBody defines body for UnlinkRichMenuIdFromUsers for application/json ContentType.
type UnlinkRichMenuIdFromUsersJSONRequestBody = RichMenuBulkUnlinkRequest

// ValidateRichMenuObjectJSONRequestBody defines body for ValidateRichMenuObject for application/json ContentType.
type ValidateRichMenuObjectJSONRequestBody = RichMenuRequest

// ValidateRichMenuBatchRequestJSONRequestBody defines body for ValidateRichMenuBatchRequest for application/json ContentType.
type ValidateRichMenuBatchRequestJSONRequestBody = RichMenuBatchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /bot/pnp/push)
	PushMessagesByPhone(w http.ResponseWriter, r *http.Request, params PushMessagesByPhoneParams)

	// (GET /v2/bot/channel/webhook/endpoint)
	GetWebhookEndpoint(w http.ResponseWriter, r *http.Request)

	// (PUT /v2/bot/channel/webhook/endpoint)
	SetWebhookEndpoint(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/channel/webhook/test)
	TestWebhookEndpoint(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/chat/loading/start)
	ShowLoadingAnimation(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/coupon)
	ListCoupon(w http.ResponseWriter, r *http.Request, params ListCouponParams)

	// (POST /v2/bot/coupon)
	CreateCoupon(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/coupon/{couponId})
	GetCouponDetail(w http.ResponseWriter, r *http.Request, couponId string)

	// (PUT /v2/bot/coupon/{couponId}/close)
	CloseCoupon(w http.ResponseWriter, r *http.Request, couponId string)

	// (GET /v2/bot/followers/ids)
	GetFollowers(w http.ResponseWriter, r *http.Request, params GetFollowersParams)

	// (POST /v2/bot/group/{groupId}/leave)
	LeaveGroup(w http.ResponseWriter, r *http.Request, groupId string)

	// (GET /v2/bot/group/{groupId}/member/{userId})
	GetGroupMemberProfile(w http.ResponseWriter, r *http.Request, groupId string, userId string)

	// (GET /v2/bot/group/{groupId}/members/count)
	GetGroupMemberCount(w http.ResponseWriter, r *http.Request, groupId string)

	// (GET /v2/bot/group/{groupId}/members/ids)
	GetGroupMembersIds(w http.ResponseWriter, r *http.Request, groupId string, params GetGroupMembersIdsParams)

	// (GET /v2/bot/group/{groupId}/summary)
	GetGroupSummary(w http.ResponseWriter, r *http.Request, groupId string)

	// (GET /v2/bot/info)
	GetBotInfo(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/membership/list)
	GetMembershipList(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/membership/subscription/{userId})
	GetMembershipSubscription(w http.ResponseWriter, r *http.Request, userId string)

	// (GET /v2/bot/membership/{membershipId}/users/ids)
	GetJoinedMembershipUsers(w http.ResponseWriter, r *http.Request, membershipId int, params GetJoinedMembershipUsersParams)

	// (GET /v2/bot/message/aggregation/info)
	GetAggregationUnitUsage(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/message/aggregation/list)
	GetAggregationUnitNameList(w http.ResponseWriter, r *http.Request, params GetAggregationUnitNameListParams)

	// (POST /v2/bot/message/broadcast)
	Broadcast(w http.ResponseWriter, r *http.Request, params BroadcastParams)

	// (GET /v2/bot/message/delivery/broadcast)
	GetNumberOfSentBroadcastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentBroadcastMessagesParams)

	// (GET /v2/bot/message/delivery/multicast)
	GetNumberOfSentMulticastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentMulticastMessagesParams)

	// (GET /v2/bot/message/delivery/pnp)
	GetPNPMessageStatistics(w http.ResponseWriter, r *http.Request, params GetPNPMessageStatisticsParams)

	// (GET /v2/bot/message/delivery/push)
	GetNumberOfSentPushMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentPushMessagesParams)

	// (GET /v2/bot/message/delivery/reply)
	GetNumberOfSentReplyMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentReplyMessagesParams)

	// (POST /v2/bot/message/markAsRead)
	MarkMessagesAsRead(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/multicast)
	Multicast(w http.ResponseWriter, r *http.Request, params MulticastParams)

	// (POST /v2/bot/message/narrowcast)
	Narrowcast(w http.ResponseWriter, r *http.Request, params NarrowcastParams)

	// (GET /v2/bot/message/progress/narrowcast)
	GetNarrowcastProgress(w http.ResponseWriter, r *http.Request, params GetNarrowcastProgressParams)

	// (POST /v2/bot/message/push)
	PushMessage(w http.ResponseWriter, r *http.Request, params PushMessageParams)

	// (GET /v2/bot/message/quota)
	GetMessageQuota(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/message/quota/consumption)
	GetMessageQuotaConsumption(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/reply)
	ReplyMessage(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/validate/broadcast)
	ValidateBroadcast(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/validate/multicast)
	ValidateMulticast(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/validate/narrowcast)
	ValidateNarrowcast(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/validate/push)
	ValidatePush(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/message/validate/reply)
	ValidateReply(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/message/{messageId}/content)
	GetMessageContent(w http.ResponseWriter, r *http.Request, messageId string)

	// (GET /v2/bot/message/{messageId}/content/preview)
	GetMessageContentPreview(w http.ResponseWriter, r *http.Request, messageId string)

	// (GET /v2/bot/message/{messageId}/content/transcoding)
	GetMessageContentTranscodingByMessageId(w http.ResponseWriter, r *http.Request, messageId string)

	// (GET /v2/bot/profile/{userId})
	GetProfile(w http.ResponseWriter, r *http.Request, userId string)

	// (POST /v2/bot/richmenu)
	CreateRichMenu(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/richmenu/alias)
	CreateRichMenuAlias(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/richmenu/alias/list)
	GetRichMenuAliasList(w http.ResponseWriter, r *http.Request)

	// (DELETE /v2/bot/richmenu/alias/{richMenuAliasId})
	DeleteRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string)

	// (GET /v2/bot/richmenu/alias/{richMenuAliasId})
	GetRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string)

	// (POST /v2/bot/richmenu/alias/{richMenuAliasId})
	UpdateRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string)

	// (POST /v2/bot/richmenu/batch)
	RichMenuBatch(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/richmenu/bulk/link)
	LinkRichMenuIdToUsers(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/richmenu/bulk/unlink)
	UnlinkRichMenuIdFromUsers(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/richmenu/list)
	GetRichMenuList(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/richmenu/progress/batch)
	GetRichMenuBatchProgress(w http.ResponseWriter, r *http.Request, params GetRichMenuBatchProgressParams)

	// (POST /v2/bot/richmenu/validate)
	ValidateRichMenuObject(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/richmenu/validate/batch)
	ValidateRichMenuBatchRequest(w http.ResponseWriter, r *http.Request)

	// (DELETE /v2/bot/richmenu/{richMenuId})
	DeleteRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string)

	// (GET /v2/bot/richmenu/{richMenuId})
	GetRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string)

	// (GET /v2/bot/richmenu/{richMenuId}/content)
	GetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string)

	// (POST /v2/bot/richmenu/{richMenuId}/content)
	SetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string)

	// (POST /v2/bot/room/{roomId}/leave)
	LeaveRoom(w http.ResponseWriter, r *http.Request, roomId string)

	// (GET /v2/bot/room/{roomId}/member/{userId})
	GetRoomMemberProfile(w http.ResponseWriter, r *http.Request, roomId string, userId string)

	// (GET /v2/bot/room/{roomId}/members/count)
	GetRoomMemberCount(w http.ResponseWriter, r *http.Request, roomId string)

	// (GET /v2/bot/room/{roomId}/members/ids)
	GetRoomMembersIds(w http.ResponseWriter, r *http.Request, roomId string, params GetRoomMembersIdsParams)

	// (DELETE /v2/bot/user/all/richmenu)
	CancelDefaultRichMenu(w http.ResponseWriter, r *http.Request)

	// (GET /v2/bot/user/all/richmenu)
	GetDefaultRichMenuId(w http.ResponseWriter, r *http.Request)

	// (POST /v2/bot/user/all/richmenu/{richMenuId})
	SetDefaultRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string)

	// (POST /v2/bot/user/{userId}/linkToken)
	IssueLinkToken(w http.ResponseWriter, r *http.Request, userId string)

	// (DELETE /v2/bot/user/{userId}/richmenu)
	UnlinkRichMenuIdFromUser(w http.ResponseWriter, r *http.Request, userId string)

	// (GET /v2/bot/user/{userId}/richmenu)
	GetRichMenuIdOfUser(w http.ResponseWriter, r *http.Request, userId string)

	// (POST /v2/bot/user/{userId}/richmenu/{richMenuId})
	LinkRichMenuIdToUser(w http.ResponseWriter, r *http.Request, userId string, richMenuId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /bot/pnp/push)
func (_ Unimplemented) PushMessagesByPhone(w http.ResponseWriter, r *http.Request, params PushMessagesByPhoneParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/channel/webhook/endpoint)
func (_ Unimplemented) GetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /v2/bot/channel/webhook/endpoint)
func (_ Unimplemented) SetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/channel/webhook/test)
func (_ Unimplemented) TestWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/chat/loading/start)
func (_ Unimplemented) ShowLoadingAnimation(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/coupon)
func (_ Unimplemented) ListCoupon(w http.ResponseWriter, r *http.Request, params ListCouponParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/coupon)
func (_ Unimplemented) CreateCoupon(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/coupon/{couponId})
func (_ Unimplemented) GetCouponDetail(w http.ResponseWriter, r *http.Request, couponId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /v2/bot/coupon/{couponId}/close)
func (_ Unimplemented) CloseCoupon(w http.ResponseWriter, r *http.Request, couponId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/followers/ids)
func (_ Unimplemented) GetFollowers(w http.ResponseWriter, r *http.Request, params GetFollowersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/group/{groupId}/leave)
func (_ Unimplemented) LeaveGroup(w http.ResponseWriter, r *http.Request, groupId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/group/{groupId}/member/{userId})
func (_ Unimplemented) GetGroupMemberProfile(w http.ResponseWriter, r *http.Request, groupId string, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/group/{groupId}/members/count)
func (_ Unimplemented) GetGroupMemberCount(w http.ResponseWriter, r *http.Request, groupId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/group/{groupId}/members/ids)
func (_ Unimplemented) GetGroupMembersIds(w http.ResponseWriter, r *http.Request, groupId string, params GetGroupMembersIdsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/group/{groupId}/summary)
func (_ Unimplemented) GetGroupSummary(w http.ResponseWriter, r *http.Request, groupId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/info)
func (_ Unimplemented) GetBotInfo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/membership/list)
func (_ Unimplemented) GetMembershipList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/membership/subscription/{userId})
func (_ Unimplemented) GetMembershipSubscription(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/membership/{membershipId}/users/ids)
func (_ Unimplemented) GetJoinedMembershipUsers(w http.ResponseWriter, r *http.Request, membershipId int, params GetJoinedMembershipUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/aggregation/info)
func (_ Unimplemented) GetAggregationUnitUsage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/aggregation/list)
func (_ Unimplemented) GetAggregationUnitNameList(w http.ResponseWriter, r *http.Request, params GetAggregationUnitNameListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/broadcast)
func (_ Unimplemented) Broadcast(w http.ResponseWriter, r *http.Request, params BroadcastParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/delivery/broadcast)
func (_ Unimplemented) GetNumberOfSentBroadcastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentBroadcastMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/delivery/multicast)
func (_ Unimplemented) GetNumberOfSentMulticastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentMulticastMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/delivery/pnp)
func (_ Unimplemented) GetPNPMessageStatistics(w http.ResponseWriter, r *http.Request, params GetPNPMessageStatisticsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/delivery/push)
func (_ Unimplemented) GetNumberOfSentPushMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentPushMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/delivery/reply)
func (_ Unimplemented) GetNumberOfSentReplyMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentReplyMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/markAsRead)
func (_ Unimplemented) MarkMessagesAsRead(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/multicast)
func (_ Unimplemented) Multicast(w http.ResponseWriter, r *http.Request, params MulticastParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/narrowcast)
func (_ Unimplemented) Narrowcast(w http.ResponseWriter, r *http.Request, params NarrowcastParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/progress/narrowcast)
func (_ Unimplemented) GetNarrowcastProgress(w http.ResponseWriter, r *http.Request, params GetNarrowcastProgressParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/push)
func (_ Unimplemented) PushMessage(w http.ResponseWriter, r *http.Request, params PushMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/quota)
func (_ Unimplemented) GetMessageQuota(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/quota/consumption)
func (_ Unimplemented) GetMessageQuotaConsumption(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/reply)
func (_ Unimplemented) ReplyMessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/validate/broadcast)
func (_ Unimplemented) ValidateBroadcast(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/validate/multicast)
func (_ Unimplemented) ValidateMulticast(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/validate/narrowcast)
func (_ Unimplemented) ValidateNarrowcast(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/validate/push)
func (_ Unimplemented) ValidatePush(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/message/validate/reply)
func (_ Unimplemented) ValidateReply(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/{messageId}/content)
func (_ Unimplemented) GetMessageContent(w http.ResponseWriter, r *http.Request, messageId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/{messageId}/content/preview)
func (_ Unimplemented) GetMessageContentPreview(w http.ResponseWriter, r *http.Request, messageId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/message/{messageId}/content/transcoding)
func (_ Unimplemented) GetMessageContentTranscodingByMessageId(w http.ResponseWriter, r *http.Request, messageId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/profile/{userId})
func (_ Unimplemented) GetProfile(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu)
func (_ Unimplemented) CreateRichMenu(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/alias)
func (_ Unimplemented) CreateRichMenuAlias(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/alias/list)
func (_ Unimplemented) GetRichMenuAliasList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /v2/bot/richmenu/alias/{richMenuAliasId})
func (_ Unimplemented) DeleteRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/alias/{richMenuAliasId})
func (_ Unimplemented) GetRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/alias/{richMenuAliasId})
func (_ Unimplemented) UpdateRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/batch)
func (_ Unimplemented) RichMenuBatch(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/bulk/link)
func (_ Unimplemented) LinkRichMenuIdToUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/bulk/unlink)
func (_ Unimplemented) UnlinkRichMenuIdFromUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/list)
func (_ Unimplemented) GetRichMenuList(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/progress/batch)
func (_ Unimplemented) GetRichMenuBatchProgress(w http.ResponseWriter, r *http.Request, params GetRichMenuBatchProgressParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/validate)
func (_ Unimplemented) ValidateRichMenuObject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/validate/batch)
func (_ Unimplemented) ValidateRichMenuBatchRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /v2/bot/richmenu/{richMenuId})
func (_ Unimplemented) DeleteRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/{richMenuId})
func (_ Unimplemented) GetRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/richmenu/{richMenuId}/content)
func (_ Unimplemented) GetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/richmenu/{richMenuId}/content)
func (_ Unimplemented) SetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/room/{roomId}/leave)
func (_ Unimplemented) LeaveRoom(w http.ResponseWriter, r *http.Request, roomId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/room/{roomId}/member/{userId})
func (_ Unimplemented) GetRoomMemberProfile(w http.ResponseWriter, r *http.Request, roomId string, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/room/{roomId}/members/count)
func (_ Unimplemented) GetRoomMemberCount(w http.ResponseWriter, r *http.Request, roomId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/room/{roomId}/members/ids)
func (_ Unimplemented) GetRoomMembersIds(w http.ResponseWriter, r *http.Request, roomId string, params GetRoomMembersIdsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /v2/bot/user/all/richmenu)
func (_ Unimplemented) CancelDefaultRichMenu(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/user/all/richmenu)
func (_ Unimplemented) GetDefaultRichMenuId(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/user/all/richmenu/{richMenuId})
func (_ Unimplemented) SetDefaultRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/user/{userId}/linkToken)
func (_ Unimplemented) IssueLinkToken(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /v2/bot/user/{userId}/richmenu)
func (_ Unimplemented) UnlinkRichMenuIdFromUser(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /v2/bot/user/{userId}/richmenu)
func (_ Unimplemented) GetRichMenuIdOfUser(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /v2/bot/user/{userId}/richmenu/{richMenuId})
func (_ Unimplemented) LinkRichMenuIdToUser(w http.ResponseWriter, r *http.Request, userId string, richMenuId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PushMessagesByPhone operation middleware
func (siw *ServerInterfaceWrapper) PushMessagesByPhone(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PushMessagesByPhoneParams

	headers := r.Header

	// ------------- Optional header parameter "X-Line-Delivery-Tag" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Line-Delivery-Tag")]; found {
		var XLineDeliveryTag string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Line-Delivery-Tag", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Line-Delivery-Tag", valueList[0], &XLineDeliveryTag, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Line-Delivery-Tag", Err: err})
			return
		}

		params.XLineDeliveryTag = &XLineDeliveryTag

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PushMessagesByPhone(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWebhookEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWebhookEndpoint(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetWebhookEndpoint operation middleware
func (siw *ServerInterfaceWrapper) SetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetWebhookEndpoint(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TestWebhookEndpoint operation middleware
func (siw *ServerInterfaceWrapper) TestWebhookEndpoint(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TestWebhookEndpoint(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ShowLoadingAnimation operation middleware
func (siw *ServerInterfaceWrapper) ShowLoadingAnimation(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShowLoadingAnimation(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListCoupon operation middleware
func (siw *ServerInterfaceWrapper) ListCoupon(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCouponParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCoupon(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateCoupon operation middleware
func (siw *ServerInterfaceWrapper) CreateCoupon(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCoupon(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCouponDetail operation middleware
func (siw *ServerInterfaceWrapper) GetCouponDetail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "couponId" -------------
	var couponId string

	err = runtime.BindStyledParameterWithOptions("simple", "couponId", chi.URLParam(r, "couponId"), &couponId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "couponId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCouponDetail(w, r, couponId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CloseCoupon operation middleware
func (siw *ServerInterfaceWrapper) CloseCoupon(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "couponId" -------------
	var couponId string

	err = runtime.BindStyledParameterWithOptions("simple", "couponId", chi.URLParam(r, "couponId"), &couponId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "couponId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CloseCoupon(w, r, couponId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetFollowers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFollowersParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFollowers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LeaveGroup operation middleware
func (siw *ServerInterfaceWrapper) LeaveGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LeaveGroup(w, r, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupMemberProfile operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMemberProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupMemberProfile(w, r, groupId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupMemberCount operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMemberCount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupMemberCount(w, r, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupMembersIds operation middleware
func (siw *ServerInterfaceWrapper) GetGroupMembersIds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupMembersIdsParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupMembersIds(w, r, groupId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetGroupSummary operation middleware
func (siw *ServerInterfaceWrapper) GetGroupSummary(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroupSummary(w, r, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetBotInfo operation middleware
func (siw *ServerInterfaceWrapper) GetBotInfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBotInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMembershipList operation middleware
func (siw *ServerInterfaceWrapper) GetMembershipList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMembershipList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMembershipSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetMembershipSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMembershipSubscription(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJoinedMembershipUsers operation middleware
func (siw *ServerInterfaceWrapper) GetJoinedMembershipUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "membershipId" -------------
	var membershipId int

	err = runtime.BindStyledParameterWithOptions("simple", "membershipId", chi.URLParam(r, "membershipId"), &membershipId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "membershipId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJoinedMembershipUsersParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJoinedMembershipUsers(w, r, membershipId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAggregationUnitUsage operation middleware
func (siw *ServerInterfaceWrapper) GetAggregationUnitUsage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAggregationUnitUsage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAggregationUnitNameList operation middleware
func (siw *ServerInterfaceWrapper) GetAggregationUnitNameList(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAggregationUnitNameListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAggregationUnitNameList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Broadcast operation middleware
func (siw *ServerInterfaceWrapper) Broadcast(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params BroadcastParams

	headers := r.Header

	// ------------- Optional header parameter "X-Line-Retry-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Line-Retry-Key")]; found {
		var XLineRetryKey openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Line-Retry-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Line-Retry-Key", valueList[0], &XLineRetryKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Line-Retry-Key", Err: err})
			return
		}

		params.XLineRetryKey = &XLineRetryKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Broadcast(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNumberOfSentBroadcastMessages operation middleware
func (siw *ServerInterfaceWrapper) GetNumberOfSentBroadcastMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumberOfSentBroadcastMessagesParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNumberOfSentBroadcastMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNumberOfSentMulticastMessages operation middleware
func (siw *ServerInterfaceWrapper) GetNumberOfSentMulticastMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumberOfSentMulticastMessagesParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNumberOfSentMulticastMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPNPMessageStatistics operation middleware
func (siw *ServerInterfaceWrapper) GetPNPMessageStatistics(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPNPMessageStatisticsParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPNPMessageStatistics(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNumberOfSentPushMessages operation middleware
func (siw *ServerInterfaceWrapper) GetNumberOfSentPushMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumberOfSentPushMessagesParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNumberOfSentPushMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNumberOfSentReplyMessages operation middleware
func (siw *ServerInterfaceWrapper) GetNumberOfSentReplyMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumberOfSentReplyMessagesParams

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNumberOfSentReplyMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkMessagesAsRead operation middleware
func (siw *ServerInterfaceWrapper) MarkMessagesAsRead(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkMessagesAsRead(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Multicast operation middleware
func (siw *ServerInterfaceWrapper) Multicast(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params MulticastParams

	headers := r.Header

	// ------------- Optional header parameter "X-Line-Retry-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Line-Retry-Key")]; found {
		var XLineRetryKey openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Line-Retry-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Line-Retry-Key", valueList[0], &XLineRetryKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Line-Retry-Key", Err: err})
			return
		}

		params.XLineRetryKey = &XLineRetryKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Multicast(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Narrowcast operation middleware
func (siw *ServerInterfaceWrapper) Narrowcast(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params NarrowcastParams

	headers := r.Header

	// ------------- Optional header parameter "X-Line-Retry-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Line-Retry-Key")]; found {
		var XLineRetryKey openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Line-Retry-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Line-Retry-Key", valueList[0], &XLineRetryKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Line-Retry-Key", Err: err})
			return
		}

		params.XLineRetryKey = &XLineRetryKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Narrowcast(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNarrowcastProgress operation middleware
func (siw *ServerInterfaceWrapper) GetNarrowcastProgress(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNarrowcastProgressParams

	// ------------- Required query parameter "requestId" -------------

	if paramValue := r.URL.Query().Get("requestId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "requestId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "requestId", r.URL.Query(), &params.RequestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNarrowcastProgress(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PushMessage operation middleware
func (siw *ServerInterfaceWrapper) PushMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PushMessageParams

	headers := r.Header

	// ------------- Optional header parameter "X-Line-Retry-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Line-Retry-Key")]; found {
		var XLineRetryKey openapi_types.UUID
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Line-Retry-Key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Line-Retry-Key", valueList[0], &XLineRetryKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Line-Retry-Key", Err: err})
			return
		}

		params.XLineRetryKey = &XLineRetryKey

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PushMessage(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessageQuota operation middleware
func (siw *ServerInterfaceWrapper) GetMessageQuota(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageQuota(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessageQuotaConsumption operation middleware
func (siw *ServerInterfaceWrapper) GetMessageQuotaConsumption(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageQuotaConsumption(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReplyMessage operation middleware
func (siw *ServerInterfaceWrapper) ReplyMessage(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplyMessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateBroadcast operation middleware
func (siw *ServerInterfaceWrapper) ValidateBroadcast(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateBroadcast(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateMulticast operation middleware
func (siw *ServerInterfaceWrapper) ValidateMulticast(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateMulticast(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateNarrowcast operation middleware
func (siw *ServerInterfaceWrapper) ValidateNarrowcast(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateNarrowcast(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidatePush operation middleware
func (siw *ServerInterfaceWrapper) ValidatePush(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidatePush(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateReply operation middleware
func (siw *ServerInterfaceWrapper) ValidateReply(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateReply(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessageContent operation middleware
func (siw *ServerInterfaceWrapper) GetMessageContent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageContent(w, r, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessageContentPreview operation middleware
func (siw *ServerInterfaceWrapper) GetMessageContentPreview(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageContentPreview(w, r, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessageContentTranscodingByMessageId operation middleware
func (siw *ServerInterfaceWrapper) GetMessageContentTranscodingByMessageId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessageContentTranscodingByMessageId(w, r, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProfile(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRichMenu operation middleware
func (siw *ServerInterfaceWrapper) CreateRichMenu(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRichMenu(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRichMenuAlias operation middleware
func (siw *ServerInterfaceWrapper) CreateRichMenuAlias(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRichMenuAlias(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuAliasList operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuAliasList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuAliasList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRichMenuAlias operation middleware
func (siw *ServerInterfaceWrapper) DeleteRichMenuAlias(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuAliasId" -------------
	var richMenuAliasId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuAliasId", chi.URLParam(r, "richMenuAliasId"), &richMenuAliasId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuAliasId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRichMenuAlias(w, r, richMenuAliasId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuAlias operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuAlias(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuAliasId" -------------
	var richMenuAliasId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuAliasId", chi.URLParam(r, "richMenuAliasId"), &richMenuAliasId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuAliasId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuAlias(w, r, richMenuAliasId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRichMenuAlias operation middleware
func (siw *ServerInterfaceWrapper) UpdateRichMenuAlias(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuAliasId" -------------
	var richMenuAliasId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuAliasId", chi.URLParam(r, "richMenuAliasId"), &richMenuAliasId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuAliasId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRichMenuAlias(w, r, richMenuAliasId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RichMenuBatch operation middleware
func (siw *ServerInterfaceWrapper) RichMenuBatch(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RichMenuBatch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LinkRichMenuIdToUsers operation middleware
func (siw *ServerInterfaceWrapper) LinkRichMenuIdToUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinkRichMenuIdToUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnlinkRichMenuIdFromUsers operation middleware
func (siw *ServerInterfaceWrapper) UnlinkRichMenuIdFromUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnlinkRichMenuIdFromUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuList operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuList(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuBatchProgress operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuBatchProgress(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRichMenuBatchProgressParams

	// ------------- Required query parameter "requestId" -------------

	if paramValue := r.URL.Query().Get("requestId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "requestId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "requestId", r.URL.Query(), &params.RequestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuBatchProgress(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateRichMenuObject operation middleware
func (siw *ServerInterfaceWrapper) ValidateRichMenuObject(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateRichMenuObject(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateRichMenuBatchRequest operation middleware
func (siw *ServerInterfaceWrapper) ValidateRichMenuBatchRequest(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateRichMenuBatchRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRichMenu operation middleware
func (siw *ServerInterfaceWrapper) DeleteRichMenu(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRichMenu(w, r, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenu operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenu(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenu(w, r, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuImage operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuImage(w, r, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetRichMenuImage operation middleware
func (siw *ServerInterfaceWrapper) SetRichMenuImage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetRichMenuImage(w, r, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LeaveRoom operation middleware
func (siw *ServerInterfaceWrapper) LeaveRoom(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LeaveRoom(w, r, roomId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoomMemberProfile operation middleware
func (siw *ServerInterfaceWrapper) GetRoomMemberProfile(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomMemberProfile(w, r, roomId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoomMemberCount operation middleware
func (siw *ServerInterfaceWrapper) GetRoomMemberCount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomMemberCount(w, r, roomId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRoomMembersIds operation middleware
func (siw *ServerInterfaceWrapper) GetRoomMembersIds(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "roomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "roomId", chi.URLParam(r, "roomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roomId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRoomMembersIdsParams

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", r.URL.Query(), &params.Start)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomMembersIds(w, r, roomId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelDefaultRichMenu operation middleware
func (siw *ServerInterfaceWrapper) CancelDefaultRichMenu(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelDefaultRichMenu(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDefaultRichMenuId operation middleware
func (siw *ServerInterfaceWrapper) GetDefaultRichMenuId(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDefaultRichMenuId(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SetDefaultRichMenu operation middleware
func (siw *ServerInterfaceWrapper) SetDefaultRichMenu(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SetDefaultRichMenu(w, r, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// IssueLinkToken operation middleware
func (siw *ServerInterfaceWrapper) IssueLinkToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IssueLinkToken(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnlinkRichMenuIdFromUser operation middleware
func (siw *ServerInterfaceWrapper) UnlinkRichMenuIdFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnlinkRichMenuIdFromUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRichMenuIdOfUser operation middleware
func (siw *ServerInterfaceWrapper) GetRichMenuIdOfUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRichMenuIdOfUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LinkRichMenuIdToUser operation middleware
func (siw *ServerInterfaceWrapper) LinkRichMenuIdToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "richMenuId" -------------
	var richMenuId string

	err = runtime.BindStyledParameterWithOptions("simple", "richMenuId", chi.URLParam(r, "richMenuId"), &richMenuId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "richMenuId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LinkRichMenuIdToUser(w, r, userId, richMenuId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/bot/pnp/push", wrapper.PushMessagesByPhone)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/channel/webhook/endpoint", wrapper.GetWebhookEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v2/bot/channel/webhook/endpoint", wrapper.SetWebhookEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/channel/webhook/test", wrapper.TestWebhookEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/chat/loading/start", wrapper.ShowLoadingAnimation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/coupon", wrapper.ListCoupon)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/coupon", wrapper.CreateCoupon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/coupon/{couponId}", wrapper.GetCouponDetail)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v2/bot/coupon/{couponId}/close", wrapper.CloseCoupon)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/followers/ids", wrapper.GetFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/group/{groupId}/leave", wrapper.LeaveGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/group/{groupId}/member/{userId}", wrapper.GetGroupMemberProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/group/{groupId}/members/count", wrapper.GetGroupMemberCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/group/{groupId}/members/ids", wrapper.GetGroupMembersIds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/group/{groupId}/summary", wrapper.GetGroupSummary)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/info", wrapper.GetBotInfo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/membership/list", wrapper.GetMembershipList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/membership/subscription/{userId}", wrapper.GetMembershipSubscription)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/membership/{membershipId}/users/ids", wrapper.GetJoinedMembershipUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/aggregation/info", wrapper.GetAggregationUnitUsage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/aggregation/list", wrapper.GetAggregationUnitNameList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/broadcast", wrapper.Broadcast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/delivery/broadcast", wrapper.GetNumberOfSentBroadcastMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/delivery/multicast", wrapper.GetNumberOfSentMulticastMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/delivery/pnp", wrapper.GetPNPMessageStatistics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/delivery/push", wrapper.GetNumberOfSentPushMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/delivery/reply", wrapper.GetNumberOfSentReplyMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/markAsRead", wrapper.MarkMessagesAsRead)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/multicast", wrapper.Multicast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/narrowcast", wrapper.Narrowcast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/progress/narrowcast", wrapper.GetNarrowcastProgress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/push", wrapper.PushMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/quota", wrapper.GetMessageQuota)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/quota/consumption", wrapper.GetMessageQuotaConsumption)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/reply", wrapper.ReplyMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/validate/broadcast", wrapper.ValidateBroadcast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/validate/multicast", wrapper.ValidateMulticast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/validate/narrowcast", wrapper.ValidateNarrowcast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/validate/push", wrapper.ValidatePush)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/message/validate/reply", wrapper.ValidateReply)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/{messageId}/content", wrapper.GetMessageContent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/{messageId}/content/preview", wrapper.GetMessageContentPreview)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/message/{messageId}/content/transcoding", wrapper.GetMessageContentTranscodingByMessageId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/profile/{userId}", wrapper.GetProfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu", wrapper.CreateRichMenu)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/alias", wrapper.CreateRichMenuAlias)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/alias/list", wrapper.GetRichMenuAliasList)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/bot/richmenu/alias/{richMenuAliasId}", wrapper.DeleteRichMenuAlias)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/alias/{richMenuAliasId}", wrapper.GetRichMenuAlias)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/alias/{richMenuAliasId}", wrapper.UpdateRichMenuAlias)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/batch", wrapper.RichMenuBatch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/bulk/link", wrapper.LinkRichMenuIdToUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/bulk/unlink", wrapper.UnlinkRichMenuIdFromUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/list", wrapper.GetRichMenuList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/progress/batch", wrapper.GetRichMenuBatchProgress)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/validate", wrapper.ValidateRichMenuObject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/validate/batch", wrapper.ValidateRichMenuBatchRequest)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/bot/richmenu/{richMenuId}", wrapper.DeleteRichMenu)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/{richMenuId}", wrapper.GetRichMenu)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/richmenu/{richMenuId}/content", wrapper.GetRichMenuImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/richmenu/{richMenuId}/content", wrapper.SetRichMenuImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/room/{roomId}/leave", wrapper.LeaveRoom)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/room/{roomId}/member/{userId}", wrapper.GetRoomMemberProfile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/room/{roomId}/members/count", wrapper.GetRoomMemberCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/room/{roomId}/members/ids", wrapper.GetRoomMembersIds)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/bot/user/all/richmenu", wrapper.CancelDefaultRichMenu)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/user/all/richmenu", wrapper.GetDefaultRichMenuId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/user/all/richmenu/{richMenuId}", wrapper.SetDefaultRichMenu)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/user/{userId}/linkToken", wrapper.IssueLinkToken)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v2/bot/user/{userId}/richmenu", wrapper.UnlinkRichMenuIdFromUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v2/bot/user/{userId}/richmenu", wrapper.GetRichMenuIdOfUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v2/bot/user/{userId}/richmenu/{richMenuId}", wrapper.LinkRichMenuIdToUser)
	})

	return r
}

type PushMessagesByPhoneRequestObject struct {
	Params PushMessagesByPhoneParams
	Body   *PushMessagesByPhoneJSONRequestBody
}

type PushMessagesByPhoneResponseObject interface {
	VisitPushMessagesByPhoneResponse(w http.ResponseWriter) error
}

type PushMessagesByPhone200Response struct {
}

func (response PushMessagesByPhone200Response) VisitPushMessagesByPhoneResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PushMessagesByPhone422JSONResponse ErrorResponse

func (response PushMessagesByPhone422JSONResponse) VisitPushMessagesByPhoneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetWebhookEndpointRequestObject struct {
}

type GetWebhookEndpointResponseObject interface {
	VisitGetWebhookEndpointResponse(w http.ResponseWriter) error
}

type GetWebhookEndpoint200JSONResponse GetWebhookEndpointResponse

func (response GetWebhookEndpoint200JSONResponse) VisitGetWebhookEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetWebhookEndpointRequestObject struct {
	Body *SetWebhookEndpointJSONRequestBody
}

type SetWebhookEndpointResponseObject interface {
	VisitSetWebhookEndpointResponse(w http.ResponseWriter) error
}

type SetWebhookEndpoint200Response struct {
}

func (response SetWebhookEndpoint200Response) VisitSetWebhookEndpointResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TestWebhookEndpointRequestObject struct {
	Body *TestWebhookEndpointJSONRequestBody
}

type TestWebhookEndpointResponseObject interface {
	VisitTestWebhookEndpointResponse(w http.ResponseWriter) error
}

type TestWebhookEndpoint200JSONResponse TestWebhookEndpointResponse

func (response TestWebhookEndpoint200JSONResponse) VisitTestWebhookEndpointResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ShowLoadingAnimationRequestObject struct {
	Body *ShowLoadingAnimationJSONRequestBody
}

type ShowLoadingAnimationResponseObject interface {
	VisitShowLoadingAnimationResponse(w http.ResponseWriter) error
}

type ShowLoadingAnimation202JSONResponse ShowLoadingAnimationResponse

func (response ShowLoadingAnimation202JSONResponse) VisitShowLoadingAnimationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type ShowLoadingAnimation400JSONResponse ErrorResponse

func (response ShowLoadingAnimation400JSONResponse) VisitShowLoadingAnimationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListCouponRequestObject struct {
	Params ListCouponParams
}

type ListCouponResponseObject interface {
	VisitListCouponResponse(w http.ResponseWriter) error
}

type ListCoupon200JSONResponse MessagingApiPagerCouponListResponse

func (response ListCoupon200JSONResponse) VisitListCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCoupon400JSONResponse ErrorResponse

func (response ListCoupon400JSONResponse) VisitListCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCouponRequestObject struct {
	Body *CreateCouponJSONRequestBody
}

type CreateCouponResponseObject interface {
	VisitCreateCouponResponse(w http.ResponseWriter) error
}

type CreateCoupon200JSONResponse CouponCreateResponse

func (response CreateCoupon200JSONResponse) VisitCreateCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateCoupon400JSONResponse ErrorResponse

func (response CreateCoupon400JSONResponse) VisitCreateCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCouponDetailRequestObject struct {
	CouponId string `json:"couponId"`
}

type GetCouponDetailResponseObject interface {
	VisitGetCouponDetailResponse(w http.ResponseWriter) error
}

type GetCouponDetail200JSONResponse CouponResponse

func (response GetCouponDetail200JSONResponse) VisitGetCouponDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCouponDetail400JSONResponse ErrorResponse

func (response GetCouponDetail400JSONResponse) VisitGetCouponDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCouponDetail404JSONResponse ErrorResponse

func (response GetCouponDetail404JSONResponse) VisitGetCouponDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CloseCouponRequestObject struct {
	CouponId string `json:"couponId"`
}

type CloseCouponResponseObject interface {
	VisitCloseCouponResponse(w http.ResponseWriter) error
}

type CloseCoupon200Response struct {
}

func (response CloseCoupon200Response) VisitCloseCouponResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CloseCoupon400JSONResponse ErrorResponse

func (response CloseCoupon400JSONResponse) VisitCloseCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CloseCoupon404JSONResponse ErrorResponse

func (response CloseCoupon404JSONResponse) VisitCloseCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CloseCoupon410JSONResponse ErrorResponse

func (response CloseCoupon410JSONResponse) VisitCloseCouponResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type GetFollowersRequestObject struct {
	Params GetFollowersParams
}

type GetFollowersResponseObject interface {
	VisitGetFollowersResponse(w http.ResponseWriter) error
}

type GetFollowers200JSONResponse GetFollowersResponse

func (response GetFollowers200JSONResponse) VisitGetFollowersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LeaveGroupRequestObject struct {
	GroupId string `json:"groupId"`
}

type LeaveGroupResponseObject interface {
	VisitLeaveGroupResponse(w http.ResponseWriter) error
}

type LeaveGroup200Response struct {
}

func (response LeaveGroup200Response) VisitLeaveGroupResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LeaveGroup400JSONResponse ErrorResponse

func (response LeaveGroup400JSONResponse) VisitLeaveGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LeaveGroup404JSONResponse ErrorResponse

func (response LeaveGroup404JSONResponse) VisitLeaveGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupMemberProfileRequestObject struct {
	GroupId string `json:"groupId"`
	UserId  string `json:"userId"`
}

type GetGroupMemberProfileResponseObject interface {
	VisitGetGroupMemberProfileResponse(w http.ResponseWriter) error
}

type GetGroupMemberProfile200JSONResponse GroupUserProfileResponse

func (response GetGroupMemberProfile200JSONResponse) VisitGetGroupMemberProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupMemberCountRequestObject struct {
	GroupId string `json:"groupId"`
}

type GetGroupMemberCountResponseObject interface {
	VisitGetGroupMemberCountResponse(w http.ResponseWriter) error
}

type GetGroupMemberCount200JSONResponse GroupMemberCountResponse

func (response GetGroupMemberCount200JSONResponse) VisitGetGroupMemberCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupMembersIdsRequestObject struct {
	GroupId string `json:"groupId"`
	Params  GetGroupMembersIdsParams
}

type GetGroupMembersIdsResponseObject interface {
	VisitGetGroupMembersIdsResponse(w http.ResponseWriter) error
}

type GetGroupMembersIds200JSONResponse MembersIdsResponse

func (response GetGroupMembersIds200JSONResponse) VisitGetGroupMembersIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGroupSummaryRequestObject struct {
	GroupId string `json:"groupId"`
}

type GetGroupSummaryResponseObject interface {
	VisitGetGroupSummaryResponse(w http.ResponseWriter) error
}

type GetGroupSummary200JSONResponse GroupSummaryResponse

func (response GetGroupSummary200JSONResponse) VisitGetGroupSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBotInfoRequestObject struct {
}

type GetBotInfoResponseObject interface {
	VisitGetBotInfoResponse(w http.ResponseWriter) error
}

type GetBotInfo200JSONResponse BotInfoResponse

func (response GetBotInfo200JSONResponse) VisitGetBotInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMembershipListRequestObject struct {
}

type GetMembershipListResponseObject interface {
	VisitGetMembershipListResponse(w http.ResponseWriter) error
}

type GetMembershipList200JSONResponse MembershipListResponse

func (response GetMembershipList200JSONResponse) VisitGetMembershipListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMembershipList404JSONResponse ErrorResponse

func (response GetMembershipList404JSONResponse) VisitGetMembershipListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMembershipSubscriptionRequestObject struct {
	UserId string `json:"userId"`
}

type GetMembershipSubscriptionResponseObject interface {
	VisitGetMembershipSubscriptionResponse(w http.ResponseWriter) error
}

type GetMembershipSubscription200JSONResponse GetMembershipSubscriptionResponse

func (response GetMembershipSubscription200JSONResponse) VisitGetMembershipSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMembershipSubscription400JSONResponse ErrorResponse

func (response GetMembershipSubscription400JSONResponse) VisitGetMembershipSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMembershipSubscription404JSONResponse ErrorResponse

func (response GetMembershipSubscription404JSONResponse) VisitGetMembershipSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJoinedMembershipUsersRequestObject struct {
	MembershipId int `json:"membershipId"`
	Params       GetJoinedMembershipUsersParams
}

type GetJoinedMembershipUsersResponseObject interface {
	VisitGetJoinedMembershipUsersResponse(w http.ResponseWriter) error
}

type GetJoinedMembershipUsers200JSONResponse GetJoinedMembershipUsersResponse

func (response GetJoinedMembershipUsers200JSONResponse) VisitGetJoinedMembershipUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJoinedMembershipUsers400JSONResponse ErrorResponse

func (response GetJoinedMembershipUsers400JSONResponse) VisitGetJoinedMembershipUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJoinedMembershipUsers404JSONResponse ErrorResponse

func (response GetJoinedMembershipUsers404JSONResponse) VisitGetJoinedMembershipUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAggregationUnitUsageRequestObject struct {
}

type GetAggregationUnitUsageResponseObject interface {
	VisitGetAggregationUnitUsageResponse(w http.ResponseWriter) error
}

type GetAggregationUnitUsage200JSONResponse GetAggregationUnitUsageResponse

func (response GetAggregationUnitUsage200JSONResponse) VisitGetAggregationUnitUsageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAggregationUnitNameListRequestObject struct {
	Params GetAggregationUnitNameListParams
}

type GetAggregationUnitNameListResponseObject interface {
	VisitGetAggregationUnitNameListResponse(w http.ResponseWriter) error
}

type GetAggregationUnitNameList200JSONResponse GetAggregationUnitNameListResponse

func (response GetAggregationUnitNameList200JSONResponse) VisitGetAggregationUnitNameListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BroadcastRequestObject struct {
	Params BroadcastParams
	Body   *BroadcastJSONRequestBody
}

type BroadcastResponseObject interface {
	VisitBroadcastResponse(w http.ResponseWriter) error
}

type Broadcast200JSONResponse BroadcastResponse

func (response Broadcast200JSONResponse) VisitBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Broadcast400JSONResponse ErrorResponse

func (response Broadcast400JSONResponse) VisitBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Broadcast403JSONResponse ErrorResponse

func (response Broadcast403JSONResponse) VisitBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Broadcast409JSONResponse ErrorResponse

func (response Broadcast409JSONResponse) VisitBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type Broadcast429JSONResponse ErrorResponse

func (response Broadcast429JSONResponse) VisitBroadcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetNumberOfSentBroadcastMessagesRequestObject struct {
	Params GetNumberOfSentBroadcastMessagesParams
}

type GetNumberOfSentBroadcastMessagesResponseObject interface {
	VisitGetNumberOfSentBroadcastMessagesResponse(w http.ResponseWriter) error
}

type GetNumberOfSentBroadcastMessages200JSONResponse NumberOfMessagesResponse

func (response GetNumberOfSentBroadcastMessages200JSONResponse) VisitGetNumberOfSentBroadcastMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumberOfSentMulticastMessagesRequestObject struct {
	Params GetNumberOfSentMulticastMessagesParams
}

type GetNumberOfSentMulticastMessagesResponseObject interface {
	VisitGetNumberOfSentMulticastMessagesResponse(w http.ResponseWriter) error
}

type GetNumberOfSentMulticastMessages200JSONResponse NumberOfMessagesResponse

func (response GetNumberOfSentMulticastMessages200JSONResponse) VisitGetNumberOfSentMulticastMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPNPMessageStatisticsRequestObject struct {
	Params GetPNPMessageStatisticsParams
}

type GetPNPMessageStatisticsResponseObject interface {
	VisitGetPNPMessageStatisticsResponse(w http.ResponseWriter) error
}

type GetPNPMessageStatistics200JSONResponse NumberOfMessagesResponse

func (response GetPNPMessageStatistics200JSONResponse) VisitGetPNPMessageStatisticsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumberOfSentPushMessagesRequestObject struct {
	Params GetNumberOfSentPushMessagesParams
}

type GetNumberOfSentPushMessagesResponseObject interface {
	VisitGetNumberOfSentPushMessagesResponse(w http.ResponseWriter) error
}

type GetNumberOfSentPushMessages200JSONResponse NumberOfMessagesResponse

func (response GetNumberOfSentPushMessages200JSONResponse) VisitGetNumberOfSentPushMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetNumberOfSentReplyMessagesRequestObject struct {
	Params GetNumberOfSentReplyMessagesParams
}

type GetNumberOfSentReplyMessagesResponseObject interface {
	VisitGetNumberOfSentReplyMessagesResponse(w http.ResponseWriter) error
}

type GetNumberOfSentReplyMessages200JSONResponse NumberOfMessagesResponse

func (response GetNumberOfSentReplyMessages200JSONResponse) VisitGetNumberOfSentReplyMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MarkMessagesAsReadRequestObject struct {
	Body *MarkMessagesAsReadJSONRequestBody
}

type MarkMessagesAsReadResponseObject interface {
	VisitMarkMessagesAsReadResponse(w http.ResponseWriter) error
}

type MarkMessagesAsRead200Response struct {
}

func (response MarkMessagesAsRead200Response) VisitMarkMessagesAsReadResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MulticastRequestObject struct {
	Params MulticastParams
	Body   *MulticastJSONRequestBody
}

type MulticastResponseObject interface {
	VisitMulticastResponse(w http.ResponseWriter) error
}

type Multicast200JSONResponse MulticastResponse

func (response Multicast200JSONResponse) VisitMulticastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Multicast400JSONResponse ErrorResponse

func (response Multicast400JSONResponse) VisitMulticastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Multicast403JSONResponse ErrorResponse

func (response Multicast403JSONResponse) VisitMulticastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Multicast409JSONResponse ErrorResponse

func (response Multicast409JSONResponse) VisitMulticastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type Multicast429JSONResponse ErrorResponse

func (response Multicast429JSONResponse) VisitMulticastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type NarrowcastRequestObject struct {
	Params NarrowcastParams
	Body   *NarrowcastJSONRequestBody
}

type NarrowcastResponseObject interface {
	VisitNarrowcastResponse(w http.ResponseWriter) error
}

type Narrowcast202JSONResponse NarrowcastResponse

func (response Narrowcast202JSONResponse) VisitNarrowcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type Narrowcast400JSONResponse ErrorResponse

func (response Narrowcast400JSONResponse) VisitNarrowcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Narrowcast403JSONResponse ErrorResponse

func (response Narrowcast403JSONResponse) VisitNarrowcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type Narrowcast409JSONResponse ErrorResponse

func (response Narrowcast409JSONResponse) VisitNarrowcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type Narrowcast429JSONResponse ErrorResponse

func (response Narrowcast429JSONResponse) VisitNarrowcastResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetNarrowcastProgressRequestObject struct {
	Params GetNarrowcastProgressParams
}

type GetNarrowcastProgressResponseObject interface {
	VisitGetNarrowcastProgressResponse(w http.ResponseWriter) error
}

type GetNarrowcastProgress200JSONResponse NarrowcastProgressResponse

func (response GetNarrowcastProgress200JSONResponse) VisitGetNarrowcastProgressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PushMessageRequestObject struct {
	Params PushMessageParams
	Body   *PushMessageJSONRequestBody
}

type PushMessageResponseObject interface {
	VisitPushMessageResponse(w http.ResponseWriter) error
}

type PushMessage200JSONResponse PushMessageResponse

func (response PushMessage200JSONResponse) VisitPushMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PushMessage400JSONResponse ErrorResponse

func (response PushMessage400JSONResponse) VisitPushMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PushMessage403JSONResponse ErrorResponse

func (response PushMessage403JSONResponse) VisitPushMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PushMessage409JSONResponse ErrorResponse

func (response PushMessage409JSONResponse) VisitPushMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PushMessage429JSONResponse ErrorResponse

func (response PushMessage429JSONResponse) VisitPushMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetMessageQuotaRequestObject struct {
}

type GetMessageQuotaResponseObject interface {
	VisitGetMessageQuotaResponse(w http.ResponseWriter) error
}

type GetMessageQuota200JSONResponse MessageQuotaResponse

func (response GetMessageQuota200JSONResponse) VisitGetMessageQuotaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMessageQuotaConsumptionRequestObject struct {
}

type GetMessageQuotaConsumptionResponseObject interface {
	VisitGetMessageQuotaConsumptionResponse(w http.ResponseWriter) error
}

type GetMessageQuotaConsumption200JSONResponse QuotaConsumptionResponse

func (response GetMessageQuotaConsumption200JSONResponse) VisitGetMessageQuotaConsumptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplyMessageRequestObject struct {
	Body *ReplyMessageJSONRequestBody
}

type ReplyMessageResponseObject interface {
	VisitReplyMessageResponse(w http.ResponseWriter) error
}

type ReplyMessage200JSONResponse ReplyMessageResponse

func (response ReplyMessage200JSONResponse) VisitReplyMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplyMessage400JSONResponse ErrorResponse

func (response ReplyMessage400JSONResponse) VisitReplyMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplyMessage429JSONResponse ErrorResponse

func (response ReplyMessage429JSONResponse) VisitReplyMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ValidateBroadcastRequestObject struct {
	Body *ValidateBroadcastJSONRequestBody
}

type ValidateBroadcastResponseObject interface {
	VisitValidateBroadcastResponse(w http.ResponseWriter) error
}

type ValidateBroadcast200Response struct {
}

func (response ValidateBroadcast200Response) VisitValidateBroadcastResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateMulticastRequestObject struct {
	Body *ValidateMulticastJSONRequestBody
}

type ValidateMulticastResponseObject interface {
	VisitValidateMulticastResponse(w http.ResponseWriter) error
}

type ValidateMulticast200Response struct {
}

func (response ValidateMulticast200Response) VisitValidateMulticastResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateNarrowcastRequestObject struct {
	Body *ValidateNarrowcastJSONRequestBody
}

type ValidateNarrowcastResponseObject interface {
	VisitValidateNarrowcastResponse(w http.ResponseWriter) error
}

type ValidateNarrowcast200Response struct {
}

func (response ValidateNarrowcast200Response) VisitValidateNarrowcastResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidatePushRequestObject struct {
	Body *ValidatePushJSONRequestBody
}

type ValidatePushResponseObject interface {
	VisitValidatePushResponse(w http.ResponseWriter) error
}

type ValidatePush200Response struct {
}

func (response ValidatePush200Response) VisitValidatePushResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateReplyRequestObject struct {
	Body *ValidateReplyJSONRequestBody
}

type ValidateReplyResponseObject interface {
	VisitValidateReplyResponse(w http.ResponseWriter) error
}

type ValidateReply200Response struct {
}

func (response ValidateReply200Response) VisitValidateReplyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetMessageContentRequestObject struct {
	MessageId string `json:"messageId"`
}

type GetMessageContentResponseObject interface {
	VisitGetMessageContentResponse(w http.ResponseWriter) error
}

type GetMessageContent200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetMessageContent200AsteriskResponse) VisitGetMessageContentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetMessageContentPreviewRequestObject struct {
	MessageId string `json:"messageId"`
}

type GetMessageContentPreviewResponseObject interface {
	VisitGetMessageContentPreviewResponse(w http.ResponseWriter) error
}

type GetMessageContentPreview200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetMessageContentPreview200AsteriskResponse) VisitGetMessageContentPreviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetMessageContentTranscodingByMessageIdRequestObject struct {
	MessageId string `json:"messageId"`
}

type GetMessageContentTranscodingByMessageIdResponseObject interface {
	VisitGetMessageContentTranscodingByMessageIdResponse(w http.ResponseWriter) error
}

type GetMessageContentTranscodingByMessageId200JSONResponse GetMessageContentTranscodingResponse

func (response GetMessageContentTranscodingByMessageId200JSONResponse) VisitGetMessageContentTranscodingByMessageIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProfileRequestObject struct {
	UserId string `json:"userId"`
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(w http.ResponseWriter) error
}

type GetProfile200JSONResponse UserProfileResponse

func (response GetProfile200JSONResponse) VisitGetProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRichMenuRequestObject struct {
	Body *CreateRichMenuJSONRequestBody
}

type CreateRichMenuResponseObject interface {
	VisitCreateRichMenuResponse(w http.ResponseWriter) error
}

type CreateRichMenu200JSONResponse RichMenuIdResponse

func (response CreateRichMenu200JSONResponse) VisitCreateRichMenuResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRichMenuAliasRequestObject struct {
	Body *CreateRichMenuAliasJSONRequestBody
}

type CreateRichMenuAliasResponseObject interface {
	VisitCreateRichMenuAliasResponse(w http.ResponseWriter) error
}

type CreateRichMenuAlias200Response struct {
}

func (response CreateRichMenuAlias200Response) VisitCreateRichMenuAliasResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type CreateRichMenuAlias400JSONResponse ErrorResponse

func (response CreateRichMenuAlias400JSONResponse) VisitCreateRichMenuAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRichMenuAliasListRequestObject struct {
}

type GetRichMenuAliasListResponseObject interface {
	VisitGetRichMenuAliasListResponse(w http.ResponseWriter) error
}

type GetRichMenuAliasList200JSONResponse RichMenuAliasListResponse

func (response GetRichMenuAliasList200JSONResponse) VisitGetRichMenuAliasListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRichMenuAliasRequestObject struct {
	RichMenuAliasId string `json:"richMenuAliasId"`
}

type DeleteRichMenuAliasResponseObject interface {
	VisitDeleteRichMenuAliasResponse(w http.ResponseWriter) error
}

type DeleteRichMenuAlias200Response struct {
}

func (response DeleteRichMenuAlias200Response) VisitDeleteRichMenuAliasResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRichMenuAlias400JSONResponse ErrorResponse

func (response DeleteRichMenuAlias400JSONResponse) VisitDeleteRichMenuAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRichMenuAliasRequestObject struct {
	RichMenuAliasId string `json:"richMenuAliasId"`
}

type GetRichMenuAliasResponseObject interface {
	VisitGetRichMenuAliasResponse(w http.ResponseWriter) error
}

type GetRichMenuAlias200JSONResponse RichMenuAliasResponse

func (response GetRichMenuAlias200JSONResponse) VisitGetRichMenuAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRichMenuAliasRequestObject struct {
	RichMenuAliasId string `json:"richMenuAliasId"`
	Body            *UpdateRichMenuAliasJSONRequestBody
}

type UpdateRichMenuAliasResponseObject interface {
	VisitUpdateRichMenuAliasResponse(w http.ResponseWriter) error
}

type UpdateRichMenuAlias200Response struct {
}

func (response UpdateRichMenuAlias200Response) VisitUpdateRichMenuAliasResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateRichMenuAlias400JSONResponse ErrorResponse

func (response UpdateRichMenuAlias400JSONResponse) VisitUpdateRichMenuAliasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RichMenuBatchRequestObject struct {
	Body *RichMenuBatchJSONRequestBody
}

type RichMenuBatchResponseObject interface {
	VisitRichMenuBatchResponse(w http.ResponseWriter) error
}

type RichMenuBatch202Response struct {
}

func (response RichMenuBatch202Response) VisitRichMenuBatchResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type LinkRichMenuIdToUsersRequestObject struct {
	Body *LinkRichMenuIdToUsersJSONRequestBody
}

type LinkRichMenuIdToUsersResponseObject interface {
	VisitLinkRichMenuIdToUsersResponse(w http.ResponseWriter) error
}

type LinkRichMenuIdToUsers202Response struct {
}

func (response LinkRichMenuIdToUsers202Response) VisitLinkRichMenuIdToUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type UnlinkRichMenuIdFromUsersRequestObject struct {
	Body *UnlinkRichMenuIdFromUsersJSONRequestBody
}

type UnlinkRichMenuIdFromUsersResponseObject interface {
	VisitUnlinkRichMenuIdFromUsersResponse(w http.ResponseWriter) error
}

type UnlinkRichMenuIdFromUsers202Response struct {
}

func (response UnlinkRichMenuIdFromUsers202Response) VisitUnlinkRichMenuIdFromUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type GetRichMenuListRequestObject struct {
}

type GetRichMenuListResponseObject interface {
	VisitGetRichMenuListResponse(w http.ResponseWriter) error
}

type GetRichMenuList200JSONResponse RichMenuListResponse

func (response GetRichMenuList200JSONResponse) VisitGetRichMenuListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRichMenuBatchProgressRequestObject struct {
	Params GetRichMenuBatchProgressParams
}

type GetRichMenuBatchProgressResponseObject interface {
	VisitGetRichMenuBatchProgressResponse(w http.ResponseWriter) error
}

type GetRichMenuBatchProgress200JSONResponse RichMenuBatchProgressResponse

func (response GetRichMenuBatchProgress200JSONResponse) VisitGetRichMenuBatchProgressResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateRichMenuObjectRequestObject struct {
	Body *ValidateRichMenuObjectJSONRequestBody
}

type ValidateRichMenuObjectResponseObject interface {
	VisitValidateRichMenuObjectResponse(w http.ResponseWriter) error
}

type ValidateRichMenuObject200Response struct {
}

func (response ValidateRichMenuObject200Response) VisitValidateRichMenuObjectResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ValidateRichMenuBatchRequestRequestObject struct {
	Body *ValidateRichMenuBatchRequestJSONRequestBody
}

type ValidateRichMenuBatchRequestResponseObject interface {
	VisitValidateRichMenuBatchRequestResponse(w http.ResponseWriter) error
}

type ValidateRichMenuBatchRequest200Response struct {
}

func (response ValidateRichMenuBatchRequest200Response) VisitValidateRichMenuBatchRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteRichMenuRequestObject struct {
	RichMenuId string `json:"richMenuId"`
}

type DeleteRichMenuResponseObject interface {
	VisitDeleteRichMenuResponse(w http.ResponseWriter) error
}

type DeleteRichMenu200Response struct {
}

func (response DeleteRichMenu200Response) VisitDeleteRichMenuResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetRichMenuRequestObject struct {
	RichMenuId string `json:"richMenuId"`
}

type GetRichMenuResponseObject interface {
	VisitGetRichMenuResponse(w http.ResponseWriter) error
}

type GetRichMenu200JSONResponse RichMenuResponse

func (response GetRichMenu200JSONResponse) VisitGetRichMenuResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRichMenuImageRequestObject struct {
	RichMenuId string `json:"richMenuId"`
}

type GetRichMenuImageResponseObject interface {
	VisitGetRichMenuImageResponse(w http.ResponseWriter) error
}

type GetRichMenuImage200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetRichMenuImage200AsteriskResponse) VisitGetRichMenuImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type SetRichMenuImageRequestObject struct {
	RichMenuId  string `json:"richMenuId"`
	ContentType string
	Body        io.Reader
}

type SetRichMenuImageResponseObject interface {
	VisitSetRichMenuImageResponse(w http.ResponseWriter) error
}

type SetRichMenuImage200Response struct {
}

func (response SetRichMenuImage200Response) VisitSetRichMenuImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type LeaveRoomRequestObject struct {
	RoomId string `json:"roomId"`
}

type LeaveRoomResponseObject interface {
	VisitLeaveRoomResponse(w http.ResponseWriter) error
}

type LeaveRoom200Response struct {
}

func (response LeaveRoom200Response) VisitLeaveRoomResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetRoomMemberProfileRequestObject struct {
	RoomId string `json:"roomId"`
	UserId string `json:"userId"`
}

type GetRoomMemberProfileResponseObject interface {
	VisitGetRoomMemberProfileResponse(w http.ResponseWriter) error
}

type GetRoomMemberProfile200JSONResponse RoomUserProfileResponse

func (response GetRoomMemberProfile200JSONResponse) VisitGetRoomMemberProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomMemberCountRequestObject struct {
	RoomId string `json:"roomId"`
}

type GetRoomMemberCountResponseObject interface {
	VisitGetRoomMemberCountResponse(w http.ResponseWriter) error
}

type GetRoomMemberCount200JSONResponse RoomMemberCountResponse

func (response GetRoomMemberCount200JSONResponse) VisitGetRoomMemberCountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomMembersIdsRequestObject struct {
	RoomId string `json:"roomId"`
	Params GetRoomMembersIdsParams
}

type GetRoomMembersIdsResponseObject interface {
	VisitGetRoomMembersIdsResponse(w http.ResponseWriter) error
}

type GetRoomMembersIds200JSONResponse MembersIdsResponse

func (response GetRoomMembersIds200JSONResponse) VisitGetRoomMembersIdsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CancelDefaultRichMenuRequestObject struct {
}

type CancelDefaultRichMenuResponseObject interface {
	VisitCancelDefaultRichMenuResponse(w http.ResponseWriter) error
}

type CancelDefaultRichMenu200Response struct {
}

func (response CancelDefaultRichMenu200Response) VisitCancelDefaultRichMenuResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetDefaultRichMenuIdRequestObject struct {
}

type GetDefaultRichMenuIdResponseObject interface {
	VisitGetDefaultRichMenuIdResponse(w http.ResponseWriter) error
}

type GetDefaultRichMenuId200JSONResponse RichMenuIdResponse

func (response GetDefaultRichMenuId200JSONResponse) VisitGetDefaultRichMenuIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SetDefaultRichMenuRequestObject struct {
	RichMenuId string `json:"richMenuId"`
}

type SetDefaultRichMenuResponseObject interface {
	VisitSetDefaultRichMenuResponse(w http.ResponseWriter) error
}

type SetDefaultRichMenu200Response struct {
}

func (response SetDefaultRichMenu200Response) VisitSetDefaultRichMenuResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type IssueLinkTokenRequestObject struct {
	UserId string `json:"userId"`
}

type IssueLinkTokenResponseObject interface {
	VisitIssueLinkTokenResponse(w http.ResponseWriter) error
}

type IssueLinkToken200JSONResponse IssueLinkTokenResponse

func (response IssueLinkToken200JSONResponse) VisitIssueLinkTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UnlinkRichMenuIdFromUserRequestObject struct {
	UserId string `json:"userId"`
}

type UnlinkRichMenuIdFromUserResponseObject interface {
	VisitUnlinkRichMenuIdFromUserResponse(w http.ResponseWriter) error
}

type UnlinkRichMenuIdFromUser200Response struct {
}

func (response UnlinkRichMenuIdFromUser200Response) VisitUnlinkRichMenuIdFromUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetRichMenuIdOfUserRequestObject struct {
	UserId string `json:"userId"`
}

type GetRichMenuIdOfUserResponseObject interface {
	VisitGetRichMenuIdOfUserResponse(w http.ResponseWriter) error
}

type GetRichMenuIdOfUser200JSONResponse RichMenuIdResponse

func (response GetRichMenuIdOfUser200JSONResponse) VisitGetRichMenuIdOfUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LinkRichMenuIdToUserRequestObject struct {
	UserId     string `json:"userId"`
	RichMenuId string `json:"richMenuId"`
}

type LinkRichMenuIdToUserResponseObject interface {
	VisitLinkRichMenuIdToUserResponse(w http.ResponseWriter) error
}

type LinkRichMenuIdToUser200Response struct {
}

func (response LinkRichMenuIdToUser200Response) VisitLinkRichMenuIdToUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /bot/pnp/push)
	PushMessagesByPhone(ctx context.Context, request PushMessagesByPhoneRequestObject) (PushMessagesByPhoneResponseObject, error)

	// (GET /v2/bot/channel/webhook/endpoint)
	GetWebhookEndpoint(ctx context.Context, request GetWebhookEndpointRequestObject) (GetWebhookEndpointResponseObject, error)

	// (PUT /v2/bot/channel/webhook/endpoint)
	SetWebhookEndpoint(ctx context.Context, request SetWebhookEndpointRequestObject) (SetWebhookEndpointResponseObject, error)

	// (POST /v2/bot/channel/webhook/test)
	TestWebhookEndpoint(ctx context.Context, request TestWebhookEndpointRequestObject) (TestWebhookEndpointResponseObject, error)

	// (POST /v2/bot/chat/loading/start)
	ShowLoadingAnimation(ctx context.Context, request ShowLoadingAnimationRequestObject) (ShowLoadingAnimationResponseObject, error)

	// (GET /v2/bot/coupon)
	ListCoupon(ctx context.Context, request ListCouponRequestObject) (ListCouponResponseObject, error)

	// (POST /v2/bot/coupon)
	CreateCoupon(ctx context.Context, request CreateCouponRequestObject) (CreateCouponResponseObject, error)

	// (GET /v2/bot/coupon/{couponId})
	GetCouponDetail(ctx context.Context, request GetCouponDetailRequestObject) (GetCouponDetailResponseObject, error)

	// (PUT /v2/bot/coupon/{couponId}/close)
	CloseCoupon(ctx context.Context, request CloseCouponRequestObject) (CloseCouponResponseObject, error)

	// (GET /v2/bot/followers/ids)
	GetFollowers(ctx context.Context, request GetFollowersRequestObject) (GetFollowersResponseObject, error)

	// (POST /v2/bot/group/{groupId}/leave)
	LeaveGroup(ctx context.Context, request LeaveGroupRequestObject) (LeaveGroupResponseObject, error)

	// (GET /v2/bot/group/{groupId}/member/{userId})
	GetGroupMemberProfile(ctx context.Context, request GetGroupMemberProfileRequestObject) (GetGroupMemberProfileResponseObject, error)

	// (GET /v2/bot/group/{groupId}/members/count)
	GetGroupMemberCount(ctx context.Context, request GetGroupMemberCountRequestObject) (GetGroupMemberCountResponseObject, error)

	// (GET /v2/bot/group/{groupId}/members/ids)
	GetGroupMembersIds(ctx context.Context, request GetGroupMembersIdsRequestObject) (GetGroupMembersIdsResponseObject, error)

	// (GET /v2/bot/group/{groupId}/summary)
	GetGroupSummary(ctx context.Context, request GetGroupSummaryRequestObject) (GetGroupSummaryResponseObject, error)

	// (GET /v2/bot/info)
	GetBotInfo(ctx context.Context, request GetBotInfoRequestObject) (GetBotInfoResponseObject, error)

	// (GET /v2/bot/membership/list)
	GetMembershipList(ctx context.Context, request GetMembershipListRequestObject) (GetMembershipListResponseObject, error)

	// (GET /v2/bot/membership/subscription/{userId})
	GetMembershipSubscription(ctx context.Context, request GetMembershipSubscriptionRequestObject) (GetMembershipSubscriptionResponseObject, error)

	// (GET /v2/bot/membership/{membershipId}/users/ids)
	GetJoinedMembershipUsers(ctx context.Context, request GetJoinedMembershipUsersRequestObject) (GetJoinedMembershipUsersResponseObject, error)

	// (GET /v2/bot/message/aggregation/info)
	GetAggregationUnitUsage(ctx context.Context, request GetAggregationUnitUsageRequestObject) (GetAggregationUnitUsageResponseObject, error)

	// (GET /v2/bot/message/aggregation/list)
	GetAggregationUnitNameList(ctx context.Context, request GetAggregationUnitNameListRequestObject) (GetAggregationUnitNameListResponseObject, error)

	// (POST /v2/bot/message/broadcast)
	Broadcast(ctx context.Context, request BroadcastRequestObject) (BroadcastResponseObject, error)

	// (GET /v2/bot/message/delivery/broadcast)
	GetNumberOfSentBroadcastMessages(ctx context.Context, request GetNumberOfSentBroadcastMessagesRequestObject) (GetNumberOfSentBroadcastMessagesResponseObject, error)

	// (GET /v2/bot/message/delivery/multicast)
	GetNumberOfSentMulticastMessages(ctx context.Context, request GetNumberOfSentMulticastMessagesRequestObject) (GetNumberOfSentMulticastMessagesResponseObject, error)

	// (GET /v2/bot/message/delivery/pnp)
	GetPNPMessageStatistics(ctx context.Context, request GetPNPMessageStatisticsRequestObject) (GetPNPMessageStatisticsResponseObject, error)

	// (GET /v2/bot/message/delivery/push)
	GetNumberOfSentPushMessages(ctx context.Context, request GetNumberOfSentPushMessagesRequestObject) (GetNumberOfSentPushMessagesResponseObject, error)

	// (GET /v2/bot/message/delivery/reply)
	GetNumberOfSentReplyMessages(ctx context.Context, request GetNumberOfSentReplyMessagesRequestObject) (GetNumberOfSentReplyMessagesResponseObject, error)

	// (POST /v2/bot/message/markAsRead)
	MarkMessagesAsRead(ctx context.Context, request MarkMessagesAsReadRequestObject) (MarkMessagesAsReadResponseObject, error)

	// (POST /v2/bot/message/multicast)
	Multicast(ctx context.Context, request MulticastRequestObject) (MulticastResponseObject, error)

	// (POST /v2/bot/message/narrowcast)
	Narrowcast(ctx context.Context, request NarrowcastRequestObject) (NarrowcastResponseObject, error)

	// (GET /v2/bot/message/progress/narrowcast)
	GetNarrowcastProgress(ctx context.Context, request GetNarrowcastProgressRequestObject) (GetNarrowcastProgressResponseObject, error)

	// (POST /v2/bot/message/push)
	PushMessage(ctx context.Context, request PushMessageRequestObject) (PushMessageResponseObject, error)

	// (GET /v2/bot/message/quota)
	GetMessageQuota(ctx context.Context, request GetMessageQuotaRequestObject) (GetMessageQuotaResponseObject, error)

	// (GET /v2/bot/message/quota/consumption)
	GetMessageQuotaConsumption(ctx context.Context, request GetMessageQuotaConsumptionRequestObject) (GetMessageQuotaConsumptionResponseObject, error)

	// (POST /v2/bot/message/reply)
	ReplyMessage(ctx context.Context, request ReplyMessageRequestObject) (ReplyMessageResponseObject, error)

	// (POST /v2/bot/message/validate/broadcast)
	ValidateBroadcast(ctx context.Context, request ValidateBroadcastRequestObject) (ValidateBroadcastResponseObject, error)

	// (POST /v2/bot/message/validate/multicast)
	ValidateMulticast(ctx context.Context, request ValidateMulticastRequestObject) (ValidateMulticastResponseObject, error)

	// (POST /v2/bot/message/validate/narrowcast)
	ValidateNarrowcast(ctx context.Context, request ValidateNarrowcastRequestObject) (ValidateNarrowcastResponseObject, error)

	// (POST /v2/bot/message/validate/push)
	ValidatePush(ctx context.Context, request ValidatePushRequestObject) (ValidatePushResponseObject, error)

	// (POST /v2/bot/message/validate/reply)
	ValidateReply(ctx context.Context, request ValidateReplyRequestObject) (ValidateReplyResponseObject, error)

	// (GET /v2/bot/message/{messageId}/content)
	GetMessageContent(ctx context.Context, request GetMessageContentRequestObject) (GetMessageContentResponseObject, error)

	// (GET /v2/bot/message/{messageId}/content/preview)
	GetMessageContentPreview(ctx context.Context, request GetMessageContentPreviewRequestObject) (GetMessageContentPreviewResponseObject, error)

	// (GET /v2/bot/message/{messageId}/content/transcoding)
	GetMessageContentTranscodingByMessageId(ctx context.Context, request GetMessageContentTranscodingByMessageIdRequestObject) (GetMessageContentTranscodingByMessageIdResponseObject, error)

	// (GET /v2/bot/profile/{userId})
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)

	// (POST /v2/bot/richmenu)
	CreateRichMenu(ctx context.Context, request CreateRichMenuRequestObject) (CreateRichMenuResponseObject, error)

	// (POST /v2/bot/richmenu/alias)
	CreateRichMenuAlias(ctx context.Context, request CreateRichMenuAliasRequestObject) (CreateRichMenuAliasResponseObject, error)

	// (GET /v2/bot/richmenu/alias/list)
	GetRichMenuAliasList(ctx context.Context, request GetRichMenuAliasListRequestObject) (GetRichMenuAliasListResponseObject, error)

	// (DELETE /v2/bot/richmenu/alias/{richMenuAliasId})
	DeleteRichMenuAlias(ctx context.Context, request DeleteRichMenuAliasRequestObject) (DeleteRichMenuAliasResponseObject, error)

	// (GET /v2/bot/richmenu/alias/{richMenuAliasId})
	GetRichMenuAlias(ctx context.Context, request GetRichMenuAliasRequestObject) (GetRichMenuAliasResponseObject, error)

	// (POST /v2/bot/richmenu/alias/{richMenuAliasId})
	UpdateRichMenuAlias(ctx context.Context, request UpdateRichMenuAliasRequestObject) (UpdateRichMenuAliasResponseObject, error)

	// (POST /v2/bot/richmenu/batch)
	RichMenuBatch(ctx context.Context, request RichMenuBatchRequestObject) (RichMenuBatchResponseObject, error)

	// (POST /v2/bot/richmenu/bulk/link)
	LinkRichMenuIdToUsers(ctx context.Context, request LinkRichMenuIdToUsersRequestObject) (LinkRichMenuIdToUsersResponseObject, error)

	// (POST /v2/bot/richmenu/bulk/unlink)
	UnlinkRichMenuIdFromUsers(ctx context.Context, request UnlinkRichMenuIdFromUsersRequestObject) (UnlinkRichMenuIdFromUsersResponseObject, error)

	// (GET /v2/bot/richmenu/list)
	GetRichMenuList(ctx context.Context, request GetRichMenuListRequestObject) (GetRichMenuListResponseObject, error)

	// (GET /v2/bot/richmenu/progress/batch)
	GetRichMenuBatchProgress(ctx context.Context, request GetRichMenuBatchProgressRequestObject) (GetRichMenuBatchProgressResponseObject, error)

	// (POST /v2/bot/richmenu/validate)
	ValidateRichMenuObject(ctx context.Context, request ValidateRichMenuObjectRequestObject) (ValidateRichMenuObjectResponseObject, error)

	// (POST /v2/bot/richmenu/validate/batch)
	ValidateRichMenuBatchRequest(ctx context.Context, request ValidateRichMenuBatchRequestRequestObject) (ValidateRichMenuBatchRequestResponseObject, error)

	// (DELETE /v2/bot/richmenu/{richMenuId})
	DeleteRichMenu(ctx context.Context, request DeleteRichMenuRequestObject) (DeleteRichMenuResponseObject, error)

	// (GET /v2/bot/richmenu/{richMenuId})
	GetRichMenu(ctx context.Context, request GetRichMenuRequestObject) (GetRichMenuResponseObject, error)

	// (GET /v2/bot/richmenu/{richMenuId}/content)
	GetRichMenuImage(ctx context.Context, request GetRichMenuImageRequestObject) (GetRichMenuImageResponseObject, error)

	// (POST /v2/bot/richmenu/{richMenuId}/content)
	SetRichMenuImage(ctx context.Context, request SetRichMenuImageRequestObject) (SetRichMenuImageResponseObject, error)

	// (POST /v2/bot/room/{roomId}/leave)
	LeaveRoom(ctx context.Context, request LeaveRoomRequestObject) (LeaveRoomResponseObject, error)

	// (GET /v2/bot/room/{roomId}/member/{userId})
	GetRoomMemberProfile(ctx context.Context, request GetRoomMemberProfileRequestObject) (GetRoomMemberProfileResponseObject, error)

	// (GET /v2/bot/room/{roomId}/members/count)
	GetRoomMemberCount(ctx context.Context, request GetRoomMemberCountRequestObject) (GetRoomMemberCountResponseObject, error)

	// (GET /v2/bot/room/{roomId}/members/ids)
	GetRoomMembersIds(ctx context.Context, request GetRoomMembersIdsRequestObject) (GetRoomMembersIdsResponseObject, error)

	// (DELETE /v2/bot/user/all/richmenu)
	CancelDefaultRichMenu(ctx context.Context, request CancelDefaultRichMenuRequestObject) (CancelDefaultRichMenuResponseObject, error)

	// (GET /v2/bot/user/all/richmenu)
	GetDefaultRichMenuId(ctx context.Context, request GetDefaultRichMenuIdRequestObject) (GetDefaultRichMenuIdResponseObject, error)

	// (POST /v2/bot/user/all/richmenu/{richMenuId})
	SetDefaultRichMenu(ctx context.Context, request SetDefaultRichMenuRequestObject) (SetDefaultRichMenuResponseObject, error)

	// (POST /v2/bot/user/{userId}/linkToken)
	IssueLinkToken(ctx context.Context, request IssueLinkTokenRequestObject) (IssueLinkTokenResponseObject, error)

	// (DELETE /v2/bot/user/{userId}/richmenu)
	UnlinkRichMenuIdFromUser(ctx context.Context, request UnlinkRichMenuIdFromUserRequestObject) (UnlinkRichMenuIdFromUserResponseObject, error)

	// (GET /v2/bot/user/{userId}/richmenu)
	GetRichMenuIdOfUser(ctx context.Context, request GetRichMenuIdOfUserRequestObject) (GetRichMenuIdOfUserResponseObject, error)

	// (POST /v2/bot/user/{userId}/richmenu/{richMenuId})
	LinkRichMenuIdToUser(ctx context.Context, request LinkRichMenuIdToUserRequestObject) (LinkRichMenuIdToUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PushMessagesByPhone operation middleware
func (sh *strictHandler) PushMessagesByPhone(w http.ResponseWriter, r *http.Request, params PushMessagesByPhoneParams) {
	var request PushMessagesByPhoneRequestObject

	request.Params = params

	var body PushMessagesByPhoneJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PushMessagesByPhone(ctx, request.(PushMessagesByPhoneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PushMessagesByPhone")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PushMessagesByPhoneResponseObject); ok {
		if err := validResponse.VisitPushMessagesByPhoneResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWebhookEndpoint operation middleware
func (sh *strictHandler) GetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	var request GetWebhookEndpointRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWebhookEndpoint(ctx, request.(GetWebhookEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWebhookEndpoint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWebhookEndpointResponseObject); ok {
		if err := validResponse.VisitGetWebhookEndpointResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetWebhookEndpoint operation middleware
func (sh *strictHandler) SetWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	var request SetWebhookEndpointRequestObject

	var body SetWebhookEndpointJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetWebhookEndpoint(ctx, request.(SetWebhookEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetWebhookEndpoint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetWebhookEndpointResponseObject); ok {
		if err := validResponse.VisitSetWebhookEndpointResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TestWebhookEndpoint operation middleware
func (sh *strictHandler) TestWebhookEndpoint(w http.ResponseWriter, r *http.Request) {
	var request TestWebhookEndpointRequestObject

	var body TestWebhookEndpointJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TestWebhookEndpoint(ctx, request.(TestWebhookEndpointRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TestWebhookEndpoint")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TestWebhookEndpointResponseObject); ok {
		if err := validResponse.VisitTestWebhookEndpointResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ShowLoadingAnimation operation middleware
func (sh *strictHandler) ShowLoadingAnimation(w http.ResponseWriter, r *http.Request) {
	var request ShowLoadingAnimationRequestObject

	var body ShowLoadingAnimationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ShowLoadingAnimation(ctx, request.(ShowLoadingAnimationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ShowLoadingAnimation")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ShowLoadingAnimationResponseObject); ok {
		if err := validResponse.VisitShowLoadingAnimationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListCoupon operation middleware
func (sh *strictHandler) ListCoupon(w http.ResponseWriter, r *http.Request, params ListCouponParams) {
	var request ListCouponRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCoupon(ctx, request.(ListCouponRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCoupon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCouponResponseObject); ok {
		if err := validResponse.VisitListCouponResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateCoupon operation middleware
func (sh *strictHandler) CreateCoupon(w http.ResponseWriter, r *http.Request) {
	var request CreateCouponRequestObject

	var body CreateCouponJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCoupon(ctx, request.(CreateCouponRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCoupon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateCouponResponseObject); ok {
		if err := validResponse.VisitCreateCouponResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCouponDetail operation middleware
func (sh *strictHandler) GetCouponDetail(w http.ResponseWriter, r *http.Request, couponId string) {
	var request GetCouponDetailRequestObject

	request.CouponId = couponId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCouponDetail(ctx, request.(GetCouponDetailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCouponDetail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCouponDetailResponseObject); ok {
		if err := validResponse.VisitGetCouponDetailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CloseCoupon operation middleware
func (sh *strictHandler) CloseCoupon(w http.ResponseWriter, r *http.Request, couponId string) {
	var request CloseCouponRequestObject

	request.CouponId = couponId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CloseCoupon(ctx, request.(CloseCouponRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CloseCoupon")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CloseCouponResponseObject); ok {
		if err := validResponse.VisitCloseCouponResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFollowers operation middleware
func (sh *strictHandler) GetFollowers(w http.ResponseWriter, r *http.Request, params GetFollowersParams) {
	var request GetFollowersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFollowers(ctx, request.(GetFollowersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFollowers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFollowersResponseObject); ok {
		if err := validResponse.VisitGetFollowersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LeaveGroup operation middleware
func (sh *strictHandler) LeaveGroup(w http.ResponseWriter, r *http.Request, groupId string) {
	var request LeaveGroupRequestObject

	request.GroupId = groupId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LeaveGroup(ctx, request.(LeaveGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LeaveGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LeaveGroupResponseObject); ok {
		if err := validResponse.VisitLeaveGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupMemberProfile operation middleware
func (sh *strictHandler) GetGroupMemberProfile(w http.ResponseWriter, r *http.Request, groupId string, userId string) {
	var request GetGroupMemberProfileRequestObject

	request.GroupId = groupId
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupMemberProfile(ctx, request.(GetGroupMemberProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupMemberProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupMemberProfileResponseObject); ok {
		if err := validResponse.VisitGetGroupMemberProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupMemberCount operation middleware
func (sh *strictHandler) GetGroupMemberCount(w http.ResponseWriter, r *http.Request, groupId string) {
	var request GetGroupMemberCountRequestObject

	request.GroupId = groupId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupMemberCount(ctx, request.(GetGroupMemberCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupMemberCount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupMemberCountResponseObject); ok {
		if err := validResponse.VisitGetGroupMemberCountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupMembersIds operation middleware
func (sh *strictHandler) GetGroupMembersIds(w http.ResponseWriter, r *http.Request, groupId string, params GetGroupMembersIdsParams) {
	var request GetGroupMembersIdsRequestObject

	request.GroupId = groupId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupMembersIds(ctx, request.(GetGroupMembersIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupMembersIds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupMembersIdsResponseObject); ok {
		if err := validResponse.VisitGetGroupMembersIdsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGroupSummary operation middleware
func (sh *strictHandler) GetGroupSummary(w http.ResponseWriter, r *http.Request, groupId string) {
	var request GetGroupSummaryRequestObject

	request.GroupId = groupId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetGroupSummary(ctx, request.(GetGroupSummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGroupSummary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetGroupSummaryResponseObject); ok {
		if err := validResponse.VisitGetGroupSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBotInfo operation middleware
func (sh *strictHandler) GetBotInfo(w http.ResponseWriter, r *http.Request) {
	var request GetBotInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetBotInfo(ctx, request.(GetBotInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBotInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetBotInfoResponseObject); ok {
		if err := validResponse.VisitGetBotInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMembershipList operation middleware
func (sh *strictHandler) GetMembershipList(w http.ResponseWriter, r *http.Request) {
	var request GetMembershipListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMembershipList(ctx, request.(GetMembershipListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMembershipList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMembershipListResponseObject); ok {
		if err := validResponse.VisitGetMembershipListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMembershipSubscription operation middleware
func (sh *strictHandler) GetMembershipSubscription(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetMembershipSubscriptionRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMembershipSubscription(ctx, request.(GetMembershipSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMembershipSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMembershipSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetMembershipSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJoinedMembershipUsers operation middleware
func (sh *strictHandler) GetJoinedMembershipUsers(w http.ResponseWriter, r *http.Request, membershipId int, params GetJoinedMembershipUsersParams) {
	var request GetJoinedMembershipUsersRequestObject

	request.MembershipId = membershipId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJoinedMembershipUsers(ctx, request.(GetJoinedMembershipUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJoinedMembershipUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJoinedMembershipUsersResponseObject); ok {
		if err := validResponse.VisitGetJoinedMembershipUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAggregationUnitUsage operation middleware
func (sh *strictHandler) GetAggregationUnitUsage(w http.ResponseWriter, r *http.Request) {
	var request GetAggregationUnitUsageRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAggregationUnitUsage(ctx, request.(GetAggregationUnitUsageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAggregationUnitUsage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAggregationUnitUsageResponseObject); ok {
		if err := validResponse.VisitGetAggregationUnitUsageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAggregationUnitNameList operation middleware
func (sh *strictHandler) GetAggregationUnitNameList(w http.ResponseWriter, r *http.Request, params GetAggregationUnitNameListParams) {
	var request GetAggregationUnitNameListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAggregationUnitNameList(ctx, request.(GetAggregationUnitNameListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAggregationUnitNameList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAggregationUnitNameListResponseObject); ok {
		if err := validResponse.VisitGetAggregationUnitNameListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Broadcast operation middleware
func (sh *strictHandler) Broadcast(w http.ResponseWriter, r *http.Request, params BroadcastParams) {
	var request BroadcastRequestObject

	request.Params = params

	var body BroadcastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Broadcast(ctx, request.(BroadcastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Broadcast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(BroadcastResponseObject); ok {
		if err := validResponse.VisitBroadcastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumberOfSentBroadcastMessages operation middleware
func (sh *strictHandler) GetNumberOfSentBroadcastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentBroadcastMessagesParams) {
	var request GetNumberOfSentBroadcastMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumberOfSentBroadcastMessages(ctx, request.(GetNumberOfSentBroadcastMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumberOfSentBroadcastMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNumberOfSentBroadcastMessagesResponseObject); ok {
		if err := validResponse.VisitGetNumberOfSentBroadcastMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumberOfSentMulticastMessages operation middleware
func (sh *strictHandler) GetNumberOfSentMulticastMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentMulticastMessagesParams) {
	var request GetNumberOfSentMulticastMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumberOfSentMulticastMessages(ctx, request.(GetNumberOfSentMulticastMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumberOfSentMulticastMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNumberOfSentMulticastMessagesResponseObject); ok {
		if err := validResponse.VisitGetNumberOfSentMulticastMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPNPMessageStatistics operation middleware
func (sh *strictHandler) GetPNPMessageStatistics(w http.ResponseWriter, r *http.Request, params GetPNPMessageStatisticsParams) {
	var request GetPNPMessageStatisticsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPNPMessageStatistics(ctx, request.(GetPNPMessageStatisticsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPNPMessageStatistics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPNPMessageStatisticsResponseObject); ok {
		if err := validResponse.VisitGetPNPMessageStatisticsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumberOfSentPushMessages operation middleware
func (sh *strictHandler) GetNumberOfSentPushMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentPushMessagesParams) {
	var request GetNumberOfSentPushMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumberOfSentPushMessages(ctx, request.(GetNumberOfSentPushMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumberOfSentPushMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNumberOfSentPushMessagesResponseObject); ok {
		if err := validResponse.VisitGetNumberOfSentPushMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNumberOfSentReplyMessages operation middleware
func (sh *strictHandler) GetNumberOfSentReplyMessages(w http.ResponseWriter, r *http.Request, params GetNumberOfSentReplyMessagesParams) {
	var request GetNumberOfSentReplyMessagesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNumberOfSentReplyMessages(ctx, request.(GetNumberOfSentReplyMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNumberOfSentReplyMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNumberOfSentReplyMessagesResponseObject); ok {
		if err := validResponse.VisitGetNumberOfSentReplyMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkMessagesAsRead operation middleware
func (sh *strictHandler) MarkMessagesAsRead(w http.ResponseWriter, r *http.Request) {
	var request MarkMessagesAsReadRequestObject

	var body MarkMessagesAsReadJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkMessagesAsRead(ctx, request.(MarkMessagesAsReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkMessagesAsRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkMessagesAsReadResponseObject); ok {
		if err := validResponse.VisitMarkMessagesAsReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Multicast operation middleware
func (sh *strictHandler) Multicast(w http.ResponseWriter, r *http.Request, params MulticastParams) {
	var request MulticastRequestObject

	request.Params = params

	var body MulticastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Multicast(ctx, request.(MulticastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Multicast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MulticastResponseObject); ok {
		if err := validResponse.VisitMulticastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Narrowcast operation middleware
func (sh *strictHandler) Narrowcast(w http.ResponseWriter, r *http.Request, params NarrowcastParams) {
	var request NarrowcastRequestObject

	request.Params = params

	var body NarrowcastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Narrowcast(ctx, request.(NarrowcastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Narrowcast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(NarrowcastResponseObject); ok {
		if err := validResponse.VisitNarrowcastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNarrowcastProgress operation middleware
func (sh *strictHandler) GetNarrowcastProgress(w http.ResponseWriter, r *http.Request, params GetNarrowcastProgressParams) {
	var request GetNarrowcastProgressRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNarrowcastProgress(ctx, request.(GetNarrowcastProgressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNarrowcastProgress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNarrowcastProgressResponseObject); ok {
		if err := validResponse.VisitGetNarrowcastProgressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PushMessage operation middleware
func (sh *strictHandler) PushMessage(w http.ResponseWriter, r *http.Request, params PushMessageParams) {
	var request PushMessageRequestObject

	request.Params = params

	var body PushMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PushMessage(ctx, request.(PushMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PushMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PushMessageResponseObject); ok {
		if err := validResponse.VisitPushMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessageQuota operation middleware
func (sh *strictHandler) GetMessageQuota(w http.ResponseWriter, r *http.Request) {
	var request GetMessageQuotaRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageQuota(ctx, request.(GetMessageQuotaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageQuota")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageQuotaResponseObject); ok {
		if err := validResponse.VisitGetMessageQuotaResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessageQuotaConsumption operation middleware
func (sh *strictHandler) GetMessageQuotaConsumption(w http.ResponseWriter, r *http.Request) {
	var request GetMessageQuotaConsumptionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageQuotaConsumption(ctx, request.(GetMessageQuotaConsumptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageQuotaConsumption")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageQuotaConsumptionResponseObject); ok {
		if err := validResponse.VisitGetMessageQuotaConsumptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplyMessage operation middleware
func (sh *strictHandler) ReplyMessage(w http.ResponseWriter, r *http.Request) {
	var request ReplyMessageRequestObject

	var body ReplyMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplyMessage(ctx, request.(ReplyMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplyMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplyMessageResponseObject); ok {
		if err := validResponse.VisitReplyMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateBroadcast operation middleware
func (sh *strictHandler) ValidateBroadcast(w http.ResponseWriter, r *http.Request) {
	var request ValidateBroadcastRequestObject

	var body ValidateBroadcastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateBroadcast(ctx, request.(ValidateBroadcastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateBroadcast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateBroadcastResponseObject); ok {
		if err := validResponse.VisitValidateBroadcastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateMulticast operation middleware
func (sh *strictHandler) ValidateMulticast(w http.ResponseWriter, r *http.Request) {
	var request ValidateMulticastRequestObject

	var body ValidateMulticastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateMulticast(ctx, request.(ValidateMulticastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateMulticast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateMulticastResponseObject); ok {
		if err := validResponse.VisitValidateMulticastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateNarrowcast operation middleware
func (sh *strictHandler) ValidateNarrowcast(w http.ResponseWriter, r *http.Request) {
	var request ValidateNarrowcastRequestObject

	var body ValidateNarrowcastJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateNarrowcast(ctx, request.(ValidateNarrowcastRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateNarrowcast")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateNarrowcastResponseObject); ok {
		if err := validResponse.VisitValidateNarrowcastResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidatePush operation middleware
func (sh *strictHandler) ValidatePush(w http.ResponseWriter, r *http.Request) {
	var request ValidatePushRequestObject

	var body ValidatePushJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidatePush(ctx, request.(ValidatePushRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidatePush")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidatePushResponseObject); ok {
		if err := validResponse.VisitValidatePushResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateReply operation middleware
func (sh *strictHandler) ValidateReply(w http.ResponseWriter, r *http.Request) {
	var request ValidateReplyRequestObject

	var body ValidateReplyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateReply(ctx, request.(ValidateReplyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateReply")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateReplyResponseObject); ok {
		if err := validResponse.VisitValidateReplyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessageContent operation middleware
func (sh *strictHandler) GetMessageContent(w http.ResponseWriter, r *http.Request, messageId string) {
	var request GetMessageContentRequestObject

	request.MessageId = messageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageContent(ctx, request.(GetMessageContentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageContent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageContentResponseObject); ok {
		if err := validResponse.VisitGetMessageContentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessageContentPreview operation middleware
func (sh *strictHandler) GetMessageContentPreview(w http.ResponseWriter, r *http.Request, messageId string) {
	var request GetMessageContentPreviewRequestObject

	request.MessageId = messageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageContentPreview(ctx, request.(GetMessageContentPreviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageContentPreview")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageContentPreviewResponseObject); ok {
		if err := validResponse.VisitGetMessageContentPreviewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessageContentTranscodingByMessageId operation middleware
func (sh *strictHandler) GetMessageContentTranscodingByMessageId(w http.ResponseWriter, r *http.Request, messageId string) {
	var request GetMessageContentTranscodingByMessageIdRequestObject

	request.MessageId = messageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessageContentTranscodingByMessageId(ctx, request.(GetMessageContentTranscodingByMessageIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessageContentTranscodingByMessageId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageContentTranscodingByMessageIdResponseObject); ok {
		if err := validResponse.VisitGetMessageContentTranscodingByMessageIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetProfileRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProfile(ctx, request.(GetProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProfileResponseObject); ok {
		if err := validResponse.VisitGetProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRichMenu operation middleware
func (sh *strictHandler) CreateRichMenu(w http.ResponseWriter, r *http.Request) {
	var request CreateRichMenuRequestObject

	var body CreateRichMenuJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRichMenu(ctx, request.(CreateRichMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRichMenu")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRichMenuResponseObject); ok {
		if err := validResponse.VisitCreateRichMenuResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRichMenuAlias operation middleware
func (sh *strictHandler) CreateRichMenuAlias(w http.ResponseWriter, r *http.Request) {
	var request CreateRichMenuAliasRequestObject

	var body CreateRichMenuAliasJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRichMenuAlias(ctx, request.(CreateRichMenuAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRichMenuAlias")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRichMenuAliasResponseObject); ok {
		if err := validResponse.VisitCreateRichMenuAliasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuAliasList operation middleware
func (sh *strictHandler) GetRichMenuAliasList(w http.ResponseWriter, r *http.Request) {
	var request GetRichMenuAliasListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuAliasList(ctx, request.(GetRichMenuAliasListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuAliasList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuAliasListResponseObject); ok {
		if err := validResponse.VisitGetRichMenuAliasListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRichMenuAlias operation middleware
func (sh *strictHandler) DeleteRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	var request DeleteRichMenuAliasRequestObject

	request.RichMenuAliasId = richMenuAliasId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRichMenuAlias(ctx, request.(DeleteRichMenuAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRichMenuAlias")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRichMenuAliasResponseObject); ok {
		if err := validResponse.VisitDeleteRichMenuAliasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuAlias operation middleware
func (sh *strictHandler) GetRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	var request GetRichMenuAliasRequestObject

	request.RichMenuAliasId = richMenuAliasId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuAlias(ctx, request.(GetRichMenuAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuAlias")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuAliasResponseObject); ok {
		if err := validResponse.VisitGetRichMenuAliasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRichMenuAlias operation middleware
func (sh *strictHandler) UpdateRichMenuAlias(w http.ResponseWriter, r *http.Request, richMenuAliasId string) {
	var request UpdateRichMenuAliasRequestObject

	request.RichMenuAliasId = richMenuAliasId

	var body UpdateRichMenuAliasJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRichMenuAlias(ctx, request.(UpdateRichMenuAliasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRichMenuAlias")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateRichMenuAliasResponseObject); ok {
		if err := validResponse.VisitUpdateRichMenuAliasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RichMenuBatch operation middleware
func (sh *strictHandler) RichMenuBatch(w http.ResponseWriter, r *http.Request) {
	var request RichMenuBatchRequestObject

	var body RichMenuBatchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RichMenuBatch(ctx, request.(RichMenuBatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RichMenuBatch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RichMenuBatchResponseObject); ok {
		if err := validResponse.VisitRichMenuBatchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkRichMenuIdToUsers operation middleware
func (sh *strictHandler) LinkRichMenuIdToUsers(w http.ResponseWriter, r *http.Request) {
	var request LinkRichMenuIdToUsersRequestObject

	var body LinkRichMenuIdToUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LinkRichMenuIdToUsers(ctx, request.(LinkRichMenuIdToUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkRichMenuIdToUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LinkRichMenuIdToUsersResponseObject); ok {
		if err := validResponse.VisitLinkRichMenuIdToUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnlinkRichMenuIdFromUsers operation middleware
func (sh *strictHandler) UnlinkRichMenuIdFromUsers(w http.ResponseWriter, r *http.Request) {
	var request UnlinkRichMenuIdFromUsersRequestObject

	var body UnlinkRichMenuIdFromUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnlinkRichMenuIdFromUsers(ctx, request.(UnlinkRichMenuIdFromUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnlinkRichMenuIdFromUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnlinkRichMenuIdFromUsersResponseObject); ok {
		if err := validResponse.VisitUnlinkRichMenuIdFromUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuList operation middleware
func (sh *strictHandler) GetRichMenuList(w http.ResponseWriter, r *http.Request) {
	var request GetRichMenuListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuList(ctx, request.(GetRichMenuListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuListResponseObject); ok {
		if err := validResponse.VisitGetRichMenuListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuBatchProgress operation middleware
func (sh *strictHandler) GetRichMenuBatchProgress(w http.ResponseWriter, r *http.Request, params GetRichMenuBatchProgressParams) {
	var request GetRichMenuBatchProgressRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuBatchProgress(ctx, request.(GetRichMenuBatchProgressRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuBatchProgress")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuBatchProgressResponseObject); ok {
		if err := validResponse.VisitGetRichMenuBatchProgressResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateRichMenuObject operation middleware
func (sh *strictHandler) ValidateRichMenuObject(w http.ResponseWriter, r *http.Request) {
	var request ValidateRichMenuObjectRequestObject

	var body ValidateRichMenuObjectJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateRichMenuObject(ctx, request.(ValidateRichMenuObjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateRichMenuObject")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateRichMenuObjectResponseObject); ok {
		if err := validResponse.VisitValidateRichMenuObjectResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateRichMenuBatchRequest operation middleware
func (sh *strictHandler) ValidateRichMenuBatchRequest(w http.ResponseWriter, r *http.Request) {
	var request ValidateRichMenuBatchRequestRequestObject

	var body ValidateRichMenuBatchRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateRichMenuBatchRequest(ctx, request.(ValidateRichMenuBatchRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateRichMenuBatchRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateRichMenuBatchRequestResponseObject); ok {
		if err := validResponse.VisitValidateRichMenuBatchRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRichMenu operation middleware
func (sh *strictHandler) DeleteRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	var request DeleteRichMenuRequestObject

	request.RichMenuId = richMenuId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRichMenu(ctx, request.(DeleteRichMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRichMenu")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRichMenuResponseObject); ok {
		if err := validResponse.VisitDeleteRichMenuResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenu operation middleware
func (sh *strictHandler) GetRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	var request GetRichMenuRequestObject

	request.RichMenuId = richMenuId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenu(ctx, request.(GetRichMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenu")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuResponseObject); ok {
		if err := validResponse.VisitGetRichMenuResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuImage operation middleware
func (sh *strictHandler) GetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string) {
	var request GetRichMenuImageRequestObject

	request.RichMenuId = richMenuId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuImage(ctx, request.(GetRichMenuImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuImageResponseObject); ok {
		if err := validResponse.VisitGetRichMenuImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetRichMenuImage operation middleware
func (sh *strictHandler) SetRichMenuImage(w http.ResponseWriter, r *http.Request, richMenuId string) {
	var request SetRichMenuImageRequestObject

	request.RichMenuId = richMenuId
	request.ContentType = r.Header.Get("Content-Type")

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetRichMenuImage(ctx, request.(SetRichMenuImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetRichMenuImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetRichMenuImageResponseObject); ok {
		if err := validResponse.VisitSetRichMenuImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LeaveRoom operation middleware
func (sh *strictHandler) LeaveRoom(w http.ResponseWriter, r *http.Request, roomId string) {
	var request LeaveRoomRequestObject

	request.RoomId = roomId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LeaveRoom(ctx, request.(LeaveRoomRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LeaveRoom")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LeaveRoomResponseObject); ok {
		if err := validResponse.VisitLeaveRoomResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoomMemberProfile operation middleware
func (sh *strictHandler) GetRoomMemberProfile(w http.ResponseWriter, r *http.Request, roomId string, userId string) {
	var request GetRoomMemberProfileRequestObject

	request.RoomId = roomId
	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoomMemberProfile(ctx, request.(GetRoomMemberProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoomMemberProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRoomMemberProfileResponseObject); ok {
		if err := validResponse.VisitGetRoomMemberProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoomMemberCount operation middleware
func (sh *strictHandler) GetRoomMemberCount(w http.ResponseWriter, r *http.Request, roomId string) {
	var request GetRoomMemberCountRequestObject

	request.RoomId = roomId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoomMemberCount(ctx, request.(GetRoomMemberCountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoomMemberCount")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRoomMemberCountResponseObject); ok {
		if err := validResponse.VisitGetRoomMemberCountResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRoomMembersIds operation middleware
func (sh *strictHandler) GetRoomMembersIds(w http.ResponseWriter, r *http.Request, roomId string, params GetRoomMembersIdsParams) {
	var request GetRoomMembersIdsRequestObject

	request.RoomId = roomId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoomMembersIds(ctx, request.(GetRoomMembersIdsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoomMembersIds")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRoomMembersIdsResponseObject); ok {
		if err := validResponse.VisitGetRoomMembersIdsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CancelDefaultRichMenu operation middleware
func (sh *strictHandler) CancelDefaultRichMenu(w http.ResponseWriter, r *http.Request) {
	var request CancelDefaultRichMenuRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CancelDefaultRichMenu(ctx, request.(CancelDefaultRichMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CancelDefaultRichMenu")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CancelDefaultRichMenuResponseObject); ok {
		if err := validResponse.VisitCancelDefaultRichMenuResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDefaultRichMenuId operation middleware
func (sh *strictHandler) GetDefaultRichMenuId(w http.ResponseWriter, r *http.Request) {
	var request GetDefaultRichMenuIdRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDefaultRichMenuId(ctx, request.(GetDefaultRichMenuIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDefaultRichMenuId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDefaultRichMenuIdResponseObject); ok {
		if err := validResponse.VisitGetDefaultRichMenuIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SetDefaultRichMenu operation middleware
func (sh *strictHandler) SetDefaultRichMenu(w http.ResponseWriter, r *http.Request, richMenuId string) {
	var request SetDefaultRichMenuRequestObject

	request.RichMenuId = richMenuId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SetDefaultRichMenu(ctx, request.(SetDefaultRichMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetDefaultRichMenu")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SetDefaultRichMenuResponseObject); ok {
		if err := validResponse.VisitSetDefaultRichMenuResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IssueLinkToken operation middleware
func (sh *strictHandler) IssueLinkToken(w http.ResponseWriter, r *http.Request, userId string) {
	var request IssueLinkTokenRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IssueLinkToken(ctx, request.(IssueLinkTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IssueLinkToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IssueLinkTokenResponseObject); ok {
		if err := validResponse.VisitIssueLinkTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnlinkRichMenuIdFromUser operation middleware
func (sh *strictHandler) UnlinkRichMenuIdFromUser(w http.ResponseWriter, r *http.Request, userId string) {
	var request UnlinkRichMenuIdFromUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnlinkRichMenuIdFromUser(ctx, request.(UnlinkRichMenuIdFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnlinkRichMenuIdFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnlinkRichMenuIdFromUserResponseObject); ok {
		if err := validResponse.VisitUnlinkRichMenuIdFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRichMenuIdOfUser operation middleware
func (sh *strictHandler) GetRichMenuIdOfUser(w http.ResponseWriter, r *http.Request, userId string) {
	var request GetRichMenuIdOfUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRichMenuIdOfUser(ctx, request.(GetRichMenuIdOfUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRichMenuIdOfUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRichMenuIdOfUserResponseObject); ok {
		if err := validResponse.VisitGetRichMenuIdOfUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LinkRichMenuIdToUser operation middleware
func (sh *strictHandler) LinkRichMenuIdToUser(w http.ResponseWriter, r *http.Request, userId string, richMenuId string) {
	var request LinkRichMenuIdToUserRequestObject

	request.UserId = userId
	request.RichMenuId = richMenuId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LinkRichMenuIdToUser(ctx, request.(LinkRichMenuIdToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LinkRichMenuIdToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LinkRichMenuIdToUserResponseObject); ok {
		if err := validResponse.VisitLinkRichMenuIdToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
