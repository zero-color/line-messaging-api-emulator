// Package adminapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package adminapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for BotInfoResponseChatMode.
const (
	BotInfoResponseChatModeBot  BotInfoResponseChatMode = "bot"
	BotInfoResponseChatModeChat BotInfoResponseChatMode = "chat"
)

// Defines values for BotInfoResponseMarkAsReadMode.
const (
	BotInfoResponseMarkAsReadModeAuto   BotInfoResponseMarkAsReadMode = "auto"
	BotInfoResponseMarkAsReadModeManual BotInfoResponseMarkAsReadMode = "manual"
)

// Defines values for CreateBotRequestChatMode.
const (
	CreateBotRequestChatModeBot  CreateBotRequestChatMode = "bot"
	CreateBotRequestChatModeChat CreateBotRequestChatMode = "chat"
)

// Defines values for CreateBotRequestMarkAsReadMode.
const (
	CreateBotRequestMarkAsReadModeAuto   CreateBotRequestMarkAsReadMode = "auto"
	CreateBotRequestMarkAsReadModeManual CreateBotRequestMarkAsReadMode = "manual"
)

// BotInfoResponse defines model for BotInfoResponse.
type BotInfoResponse struct {
	// BasicId Bot's basic ID
	BasicId string `json:"basicId"`

	// ChatMode Chat settings set in the LINE Official Account Manager.
	// - `chat`: Chat is set to "On"
	// - `bot`: Chat is set to "Off"
	ChatMode BotInfoResponseChatMode `json:"chatMode"`

	// DisplayName Bot's display name
	DisplayName string `json:"displayName"`

	// MarkAsReadMode Automatic read setting for messages.
	// - `auto`: Auto read setting is enabled
	// - `manual`: Auto read setting is disabled
	MarkAsReadMode BotInfoResponseMarkAsReadMode `json:"markAsReadMode"`

	// PictureUrl Profile image URL. HTTPS image URL. Not included if the bot doesn't have a profile image.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// PremiumId Bot's premium ID. Not included if the premium ID isn't set.
	PremiumId *string `json:"premiumId,omitempty"`

	// UserId Bot's user ID
	UserId string `json:"userId"`
}

// BotInfoResponseChatMode Chat settings set in the LINE Official Account Manager.
// - `chat`: Chat is set to "On"
// - `bot`: Chat is set to "Off"
type BotInfoResponseChatMode string

// BotInfoResponseMarkAsReadMode Automatic read setting for messages.
// - `auto`: Auto read setting is enabled
// - `manual`: Auto read setting is disabled
type BotInfoResponseMarkAsReadMode string

// CreateBotRequest defines model for CreateBotRequest.
type CreateBotRequest struct {
	// BasicId Bot's basic ID
	BasicId string `json:"basicId"`

	// ChatMode Chat settings set in the LINE Official Account Manager.
	// - `chat`: Chat is set to "On"
	// - `bot`: Chat is set to "Off"
	ChatMode CreateBotRequestChatMode `json:"chatMode"`

	// DisplayName Bot's display name
	DisplayName string `json:"displayName"`

	// MarkAsReadMode Automatic read setting for messages.
	// - `auto`: Auto read setting is enabled
	// - `manual`: Auto read setting is disabled
	MarkAsReadMode CreateBotRequestMarkAsReadMode `json:"markAsReadMode"`

	// PictureUrl Profile image URL. Must be an HTTPS URL.
	PictureUrl *string `json:"pictureUrl,omitempty"`

	// PremiumId Bot's premium ID
	PremiumId *string `json:"premiumId,omitempty"`

	// UserId Bot's user ID
	UserId string `json:"userId"`
}

// CreateBotRequestChatMode Chat settings set in the LINE Official Account Manager.
// - `chat`: Chat is set to "On"
// - `bot`: Chat is set to "Off"
type CreateBotRequestChatMode string

// CreateBotRequestMarkAsReadMode Automatic read setting for messages.
// - `auto`: Auto read setting is enabled
// - `manual`: Auto read setting is disabled
type CreateBotRequestMarkAsReadMode string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		// Code Error code
		Code *string `json:"code,omitempty"`

		// Message Error message
		Message string `json:"message"`
	} `json:"error"`
}

// CreateBotJSONRequestBody defines body for CreateBot for application/json ContentType.
type CreateBotJSONRequestBody = CreateBotRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new bot
	// (POST /admin/bots)
	CreateBot(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create a new bot
// (POST /admin/bots)
func (_ Unimplemented) CreateBot(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateBot operation middleware
func (siw *ServerInterfaceWrapper) CreateBot(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBot(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/bots", wrapper.CreateBot)
	})

	return r
}

type CreateBotRequestObject struct {
	Body *CreateBotJSONRequestBody
}

type CreateBotResponseObject interface {
	VisitCreateBotResponse(w http.ResponseWriter) error
}

type CreateBot201JSONResponse BotInfoResponse

func (response CreateBot201JSONResponse) VisitCreateBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateBot400JSONResponse ErrorResponse

func (response CreateBot400JSONResponse) VisitCreateBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateBot409JSONResponse ErrorResponse

func (response CreateBot409JSONResponse) VisitCreateBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateBot500JSONResponse ErrorResponse

func (response CreateBot500JSONResponse) VisitCreateBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new bot
	// (POST /admin/bots)
	CreateBot(ctx context.Context, request CreateBotRequestObject) (CreateBotResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateBot operation middleware
func (sh *strictHandler) CreateBot(w http.ResponseWriter, r *http.Request) {
	var request CreateBotRequestObject

	var body CreateBotJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBot(ctx, request.(CreateBotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBot")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateBotResponseObject); ok {
		if err := validResponse.VisitCreateBotResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
