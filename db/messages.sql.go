// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBotMessages = `-- name: CountBotMessages :one
SELECT COUNT(*) FROM messages WHERE bot_id = $1
`

func (q *Queries) CountBotMessages(ctx context.Context, botID int32) (int64, error) {
	row := q.db.QueryRow(ctx, countBotMessages, botID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    bot_id, 
    message_type, 
    recipient_type,
    recipient_id,
    content,
    retry_key,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP
) RETURNING id, bot_id, message_type, recipient_type, recipient_id, content, retry_key, created_at
`

type CreateMessageParams struct {
	BotID         int32       `db:"bot_id" json:"bot_id"`
	MessageType   string      `db:"message_type" json:"message_type"`
	RecipientType *string     `db:"recipient_type" json:"recipient_type"`
	RecipientID   *string     `db:"recipient_id" json:"recipient_id"`
	Content       []byte      `db:"content" json:"content"`
	RetryKey      pgtype.UUID `db:"retry_key" json:"retry_key"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage,
		arg.BotID,
		arg.MessageType,
		arg.RecipientType,
		arg.RecipientID,
		arg.Content,
		arg.RetryKey,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.BotID,
		&i.MessageType,
		&i.RecipientType,
		&i.RecipientID,
		&i.Content,
		&i.RetryKey,
		&i.CreatedAt,
	)
	return i, err
}

const getBotMessages = `-- name: GetBotMessages :many
SELECT id, bot_id, message_type, recipient_type, recipient_id, content, retry_key, created_at FROM messages 
WHERE bot_id = $1 
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type GetBotMessagesParams struct {
	BotID  int32 `db:"bot_id" json:"bot_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetBotMessages(ctx context.Context, arg GetBotMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getBotMessages, arg.BotID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.BotID,
			&i.MessageType,
			&i.RecipientType,
			&i.RecipientID,
			&i.Content,
			&i.RetryKey,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByRetryKey = `-- name: GetMessagesByRetryKey :one
SELECT id, bot_id, message_type, recipient_type, recipient_id, content, retry_key, created_at FROM messages WHERE retry_key = $1 LIMIT 1
`

func (q *Queries) GetMessagesByRetryKey(ctx context.Context, retryKey pgtype.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, getMessagesByRetryKey, retryKey)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.BotID,
		&i.MessageType,
		&i.RecipientType,
		&i.RecipientID,
		&i.Content,
		&i.RetryKey,
		&i.CreatedAt,
	)
	return i, err
}
