// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createBotFollower = `-- name: CreateBotFollower :one
INSERT INTO bot_followers (
    bot_id,
    user_id
) VALUES (
    $1, $2
) RETURNING id, bot_id, user_id, followed_at
`

type CreateBotFollowerParams struct {
	BotID  int32 `db:"bot_id" json:"bot_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateBotFollower(ctx context.Context, arg CreateBotFollowerParams) (BotFollower, error) {
	row := q.db.QueryRow(ctx, createBotFollower, arg.BotID, arg.UserID)
	var i BotFollower
	err := row.Scan(
		&i.ID,
		&i.BotID,
		&i.UserID,
		&i.FollowedAt,
	)
	return i, err
}

type CreateBotFollowersParams struct {
	BotID  int32 `db:"bot_id" json:"bot_id"`
	UserID int32 `db:"user_id" json:"user_id"`
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id,
    display_name,
    picture_url,
    status_message,
    language
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, display_name, picture_url, status_message, language, created_at, updated_at
`

type CreateUserParams struct {
	UserID        string  `db:"user_id" json:"user_id"`
	DisplayName   string  `db:"display_name" json:"display_name"`
	PictureUrl    *string `db:"picture_url" json:"picture_url"`
	StatusMessage *string `db:"status_message" json:"status_message"`
	Language      *string `db:"language" json:"language"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.DisplayName,
		arg.PictureUrl,
		arg.StatusMessage,
		arg.Language,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.PictureUrl,
		&i.StatusMessage,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type CreateUsersParams struct {
	UserID        string  `db:"user_id" json:"user_id"`
	DisplayName   string  `db:"display_name" json:"display_name"`
	PictureUrl    *string `db:"picture_url" json:"picture_url"`
	StatusMessage *string `db:"status_message" json:"status_message"`
	Language      *string `db:"language" json:"language"`
}

const getBotFollowerCount = `-- name: GetBotFollowerCount :one
SELECT COUNT(*) FROM bot_followers WHERE bot_id = $1
`

func (q *Queries) GetBotFollowerCount(ctx context.Context, botID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getBotFollowerCount, botID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBotFollowerUser = `-- name: GetBotFollowerUser :one
SELECT u.id, u.user_id, u.display_name, u.picture_url, u.status_message, u.language, u.created_at, u.updated_at FROM users u
INNER JOIN bot_followers bf ON u.id = bf.user_id
WHERE bf.bot_id = $1 AND u.user_id = $2
`

type GetBotFollowerUserParams struct {
	BotID  int32  `db:"bot_id" json:"bot_id"`
	UserID string `db:"user_id" json:"user_id"`
}

func (q *Queries) GetBotFollowerUser(ctx context.Context, arg GetBotFollowerUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getBotFollowerUser, arg.BotID, arg.UserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.PictureUrl,
		&i.StatusMessage,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBotFollowerUserIDs = `-- name: GetBotFollowerUserIDs :many
SELECT u.user_id FROM users u
INNER JOIN bot_followers bf ON u.id = bf.user_id
WHERE bf.bot_id = $1
ORDER BY bf.followed_at DESC
LIMIT $2 OFFSET $3
`

type GetBotFollowerUserIDsParams struct {
	BotID  int32 `db:"bot_id" json:"bot_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetBotFollowerUserIDs(ctx context.Context, arg GetBotFollowerUserIDsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getBotFollowerUserIDs, arg.BotID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBotFollowers = `-- name: GetBotFollowers :many
SELECT u.id, u.user_id, u.display_name, u.picture_url, u.status_message, u.language, u.created_at, u.updated_at FROM users u
INNER JOIN bot_followers bf ON u.id = bf.user_id
WHERE bf.bot_id = $1
ORDER BY bf.followed_at DESC
LIMIT $2 OFFSET $3
`

type GetBotFollowersParams struct {
	BotID  int32 `db:"bot_id" json:"bot_id"`
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetBotFollowers(ctx context.Context, arg GetBotFollowersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getBotFollowers, arg.BotID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DisplayName,
			&i.PictureUrl,
			&i.StatusMessage,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, user_id, display_name, picture_url, status_message, language, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.PictureUrl,
		&i.StatusMessage,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_id, display_name, picture_url, status_message, language, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.PictureUrl,
		&i.StatusMessage,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersByUserIDs = `-- name: GetUsersByUserIDs :many
SELECT id, user_id, display_name, picture_url, status_message, language, created_at, updated_at FROM users WHERE user_id = ANY($1::text[])
`

func (q *Queries) GetUsersByUserIDs(ctx context.Context, dollar_1 []string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByUserIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DisplayName,
			&i.PictureUrl,
			&i.StatusMessage,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isBotFollower = `-- name: IsBotFollower :one
SELECT EXISTS (
    SELECT 1 FROM bot_followers bf
    INNER JOIN users u ON u.id = bf.user_id
    WHERE bf.bot_id = $1 AND u.user_id = $2
)
`

type IsBotFollowerParams struct {
	BotID  int32  `db:"bot_id" json:"bot_id"`
	UserID string `db:"user_id" json:"user_id"`
}

func (q *Queries) IsBotFollower(ctx context.Context, arg IsBotFollowerParams) (bool, error) {
	row := q.db.QueryRow(ctx, isBotFollower, arg.BotID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
