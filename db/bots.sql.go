// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bots.sql

package db

import (
	"context"
	"database/sql"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bots (
    user_id,
    basic_id,
    chat_mode,
    display_name,
    mark_as_read_mode,
    picture_url,
    premium_id
) VALUES (
          $1,
            $2,
            $3,
            $4,
          $5,
            $6,
            $7
) RETURNING id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at
`

type CreateBotParams struct {
	UserID         string         `db:"user_id" json:"user_id"`
	BasicID        string         `db:"basic_id" json:"basic_id"`
	ChatMode       string         `db:"chat_mode" json:"chat_mode"`
	DisplayName    string         `db:"display_name" json:"display_name"`
	MarkAsReadMode string         `db:"mark_as_read_mode" json:"mark_as_read_mode"`
	PictureUrl     sql.NullString `db:"picture_url" json:"picture_url"`
	PremiumID      sql.NullString `db:"premium_id" json:"premium_id"`
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, createBot,
		arg.UserID,
		arg.BasicID,
		arg.ChatMode,
		arg.DisplayName,
		arg.MarkAsReadMode,
		arg.PictureUrl,
		arg.PremiumID,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicID,
		&i.ChatMode,
		&i.DisplayName,
		&i.MarkAsReadMode,
		&i.PictureUrl,
		&i.PremiumID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBot = `-- name: DeleteBot :exec
DELETE FROM bots
WHERE user_id = $1
`

func (q *Queries) DeleteBot(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteBot, userID)
	return err
}

const getBot = `-- name: GetBot :one
SELECT id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at FROM bots
WHERE id = $1
`

func (q *Queries) GetBot(ctx context.Context, id int32) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBot, id)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicID,
		&i.ChatMode,
		&i.DisplayName,
		&i.MarkAsReadMode,
		&i.PictureUrl,
		&i.PremiumID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBotByBasicID = `-- name: GetBotByBasicID :one
SELECT id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at FROM bots
WHERE basic_id = $1
`

func (q *Queries) GetBotByBasicID(ctx context.Context, basicID string) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByBasicID, basicID)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicID,
		&i.ChatMode,
		&i.DisplayName,
		&i.MarkAsReadMode,
		&i.PictureUrl,
		&i.PremiumID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBotByUserID = `-- name: GetBotByUserID :one
SELECT id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at FROM bots
WHERE user_id = $1
`

func (q *Queries) GetBotByUserID(ctx context.Context, userID string) (Bot, error) {
	row := q.db.QueryRowContext(ctx, getBotByUserID, userID)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicID,
		&i.ChatMode,
		&i.DisplayName,
		&i.MarkAsReadMode,
		&i.PictureUrl,
		&i.PremiumID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBots = `-- name: ListBots :many
SELECT id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at FROM bots
ORDER BY created_at DESC
`

func (q *Queries) ListBots(ctx context.Context) ([]Bot, error) {
	rows, err := q.db.QueryContext(ctx, listBots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bot{}
	for rows.Next() {
		var i Bot
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BasicID,
			&i.ChatMode,
			&i.DisplayName,
			&i.MarkAsReadMode,
			&i.PictureUrl,
			&i.PremiumID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBot = `-- name: UpdateBot :one
UPDATE bots
SET
    basic_id = $1,
    chat_mode = $2,
    display_name = $3,
    mark_as_read_mode = $4,
    picture_url = $5,
    premium_id = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $7
RETURNING id, user_id, basic_id, chat_mode, display_name, mark_as_read_mode, picture_url, premium_id, created_at, updated_at
`

type UpdateBotParams struct {
	BasicID        string         `db:"basic_id" json:"basic_id"`
	ChatMode       string         `db:"chat_mode" json:"chat_mode"`
	DisplayName    string         `db:"display_name" json:"display_name"`
	MarkAsReadMode string         `db:"mark_as_read_mode" json:"mark_as_read_mode"`
	PictureUrl     sql.NullString `db:"picture_url" json:"picture_url"`
	PremiumID      sql.NullString `db:"premium_id" json:"premium_id"`
	UserID         string         `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateBot(ctx context.Context, arg UpdateBotParams) (Bot, error) {
	row := q.db.QueryRowContext(ctx, updateBot,
		arg.BasicID,
		arg.ChatMode,
		arg.DisplayName,
		arg.MarkAsReadMode,
		arg.PictureUrl,
		arg.PremiumID,
		arg.UserID,
	)
	var i Bot
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicID,
		&i.ChatMode,
		&i.DisplayName,
		&i.MarkAsReadMode,
		&i.PictureUrl,
		&i.PremiumID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
