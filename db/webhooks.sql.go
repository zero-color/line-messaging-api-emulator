// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhooks.sql

package db

import (
	"context"
)

const getWebhook = `-- name: GetWebhook :one
SELECT endpoint, active FROM webhooks
WHERE bot_id = $1
`

type GetWebhookRow struct {
	Endpoint string `db:"endpoint" json:"endpoint"`
	Active   bool   `db:"active" json:"active"`
}

func (q *Queries) GetWebhook(ctx context.Context, botID int32) (GetWebhookRow, error) {
	row := q.db.QueryRow(ctx, getWebhook, botID)
	var i GetWebhookRow
	err := row.Scan(&i.Endpoint, &i.Active)
	return i, err
}

const getWebhookByBotID = `-- name: GetWebhookByBotID :one
SELECT endpoint, active FROM webhooks
WHERE bot_id = $1
`

type GetWebhookByBotIDRow struct {
	Endpoint string `db:"endpoint" json:"endpoint"`
	Active   bool   `db:"active" json:"active"`
}

func (q *Queries) GetWebhookByBotID(ctx context.Context, botID int32) (GetWebhookByBotIDRow, error) {
	row := q.db.QueryRow(ctx, getWebhookByBotID, botID)
	var i GetWebhookByBotIDRow
	err := row.Scan(&i.Endpoint, &i.Active)
	return i, err
}

const upsertWebhook = `-- name: UpsertWebhook :exec
INSERT INTO webhooks (bot_id, endpoint, active, updated_at)
VALUES (
        $1,
    $2,
    true,
    CURRENT_TIMESTAMP
)
ON CONFLICT (bot_id) 
DO UPDATE SET 
    endpoint = EXCLUDED.endpoint,
    active = EXCLUDED.active,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertWebhookParams struct {
	BotID    int32  `db:"bot_id" json:"bot_id"`
	Endpoint string `db:"endpoint" json:"endpoint"`
}

func (q *Queries) UpsertWebhook(ctx context.Context, arg UpsertWebhookParams) error {
	_, err := q.db.Exec(ctx, upsertWebhook, arg.BotID, arg.Endpoint)
	return err
}
